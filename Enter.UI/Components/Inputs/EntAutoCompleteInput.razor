@namespace Enter.UI.Components
@using System.Diagnostics.CodeAnalysis
@using Enter.UI.Core.Constants;
@using Enter.UI.Core.Enums
@inherits EntTextInput
@typeparam T
<div @attributes="@AdditionalAttributes" class="@RootClass" @onclick="@Click" @ref="_elementReference" id="@Id">
    <EntTextInput 
            class="@(RootClass + "-input")"
            
                  Value="@Value" ValueChanged="@ValueChanged" ValueExpression="@ValueExpression" @oninput="@OnInputKeyDownCallback" Icon="@Icon" />

    <EntPopover Open="_showMenu" RelativeWidth="true" Anchor="Origin.BottomCenter" Transform="Origin.TopCenter" PopoverClass="@(RootClass + "-popover")">

        <div class="ent-input-autocomplete-container">
            @if (DataSources.Any())
            {
                <EntList class="ent-input-autocomplete-list">
                    @foreach (var item in DataSources)
                    {
                        <EntListItem class="ent-input-autocomplete-list-item" @onclick="()=>OnItemClickCallback(item)">
                            @if (ItemTemplate == null)
                            {
                                @SelectedText.Invoke(item)
                            }
                            else
                            {
                                @ItemTemplate?.Invoke(item)
                            }
                        </EntListItem>
                    }
                </EntList>
            }else
            {
                <p class="ent-input-autocomplete-message">داده ای یافت نشد</p>
            }
        </div>

    </EntPopover>
    <EntOverlay Visible="_showMenu" OnClick="@ClosePopover" @ontouchstart="@ClosePopover" LockScroll="false" />
</div>


@code {
    private Task AfterAsync() { return Task.CompletedTask; }
    private string RootClass => CssBuilder
        .AddClass("ent-input-autocomplete")
        .Build();


    private bool _showMenu = false;

    [Parameter]
    public List<T> DataSources { get; set; }


    [Parameter]
    public Func<T, object> SelectedValue { get; set; }
    [Parameter]
    public Func<T, object> SelectedText { get; set; }

    [Parameter] public RenderFragment<T>? ItemTemplate { get; set; }

    [Parameter] public EventCallback<string> OnSearchChange { get; set; }

    private ElementReference _elementReference;

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    private void OnInputClickCallback()
    {
        _showMenu = true;
        StateHasChanged();
    }

    private void OnInputKeyDownCallback()
    {
        _showMenu = true;
        OnSearchChange.InvokeAsync(Value);
        StateHasChanged();
    }

    private void ClosePopover()
    {
        _showMenu = false;
        StateHasChanged();
    }

    private async Task OnItemClickCallback(T t)
    {
        CurrentValueAsString = SelectedValue.Invoke(t).ToString();
        _showMenu = false;

    }

    private async Task Click(MouseEventArgs arg)
    {
        if (_showMenu)
        {
            await _elementReference.FocusAsync();
        }
    }

}