@namespace Enter.UI.Components
@using Enter.UI.Interops;
@using Enter.UI.JsService;
@using Enter.UI.Services.Contracts;
@using Microsoft.JSInterop;
@inherits EntBaseComponent

<div 
    @ref="_reference" 
    @attributes="@AdditionalAttributes" 
    @onanimationend="EventUtil.AsNonRenderingEventHandler(OnAnimationEnd)" 
    class="@RootCss" 
    style="@RootStyle" 
    id="@Id">
    @ChildContent
</div>

@code {

    // Private Properties
    private EntExpandableAnimationState? _animationState = null;
    private bool? _tempExpanded;
    private bool _expanded;
    internal double _height = 0;
    private bool _updateHeight ;
    private ElementReference _reference { get; set; }
    // Inject Services
    [Inject]
    internal IEntSharedJsService SharedJsService { get; set; }

    // Style and Css
    private string RootCss => CssClassBuilder
        .AddClass("ent-expandable")
        .AddClass("ent-expandable-closed", _animationState == EntExpandableAnimationState.Closed)
        .AddClass("ent-expandable-opened", _animationState == EntExpandableAnimationState.Opened)
        .AddClass("ent-expandable-closing", _animationState == EntExpandableAnimationState.Closing)
        .AddClass("ent-expandable-opening", _animationState == EntExpandableAnimationState.Opening)
        .Build();

    private string RootStyle => StyleBuilder
        .AddStyle("transition: all 0.25s ease-in-out",_animationState is EntExpandableAnimationState.Closing or EntExpandableAnimationState.Opening)
        .AddStyle($"height : auto",_animationState == EntExpandableAnimationState.Opened)
        .AddStyle($"height : 0px", _animationState == EntExpandableAnimationState.Closed)
        .AddStyle($"height : {_height}px",_animationState is EntExpandableAnimationState.Closing or EntExpandableAnimationState.Opening)
        .Build();

  
    

    // Parameters
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Expanded
    {
        get => _expanded;
        set
        {
            if (_expanded == value)
                return;
            _expanded = value;

            if (FirstRendered)
            {
                _animationState = _expanded ? EntExpandableAnimationState.Opening : EntExpandableAnimationState.Closing;
                _ = UpdateHeight();
                _updateHeight = true;
            }
            else if (_expanded)
            {
                _animationState = EntExpandableAnimationState.Opened;
            }

            //_ = ExpandedChanged.InvokeAsync(_expanded);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        _animationState = Expanded switch
        {
            true => EntExpandableAnimationState.Opened,
            false => EntExpandableAnimationState.Closed
        };
    }


    public async Task OnAnimationEnd()
    {
        await Task.Delay(200);
        if (_animationState == EntExpandableAnimationState.Closing)
        {
           
            _animationState = EntExpandableAnimationState.Closed;
        }
        if (_animationState == EntExpandableAnimationState.Opening)
        {
            _animationState = EntExpandableAnimationState.Opened;
        }
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_tempExpanded != Expended && FirstRendered)
        {
            _animationState = Expanded switch
            {
                true => EntExpandableAnimationState.Opening,
                false => EntExpandableAnimationState.Closing,
            };
            // await _expandableIntrop.ToogleAsync(Id, Show.Value);
            _tempExpanded = Expanded;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _height = (await SharedJsService.GetBoundingClientRect(_reference)).ScrollHeight;
        await base.OnAfterRenderAsync(firstRender);
    }


    enum EntExpandableAnimationState
    {
        Closed,
        Opened,
        Opening,
        Closing
    }

    internal async Task UpdateHeight()
    {
        try
        {
            _height = (await SharedJsService.GetBoundingClientRect(_reference))?.ScrollHeight ?? 0;
        }
        catch (Exception ex) when (ex is JSDisconnectedException or TaskCanceledException)
        {
            _height = 0;
        }
        
    }


}