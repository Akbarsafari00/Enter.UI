@namespace Enter.UI.Components
@using Enter.UI.Interops;
@using Enter.UI.JsService;
@using Enter.UI.Services.Contracts;
@using Microsoft.JSInterop;
@inherits EntBaseComponent

<div @ref="_reference"
@attributes="@AdditionalAttributes"
@onanimationend="EventUtil.AsNonRenderingEventHandler(OnAnimationEnd)"
     class="@RootCss"
     style="@RootStyle"
     id="@Id">
    @ChildContent
</div>

@code {

    enum EntExpandableAnimationState
    {
        Opened, Opening, Closed, Closing
    }


    private EntExpandableAnimationState? _animationState = EntExpandableAnimationState.Closed;
    private bool _expanded, _updateHeight;
    internal double _height = 0;
    private ElementReference _reference { get; set; }

    [Inject]
    internal IEntSharedJsService? SharedJsService { get; set; }

    // Style and Css
    private string RootCss => CssClassBuilder
        .AddClass("ent-expandable")
        .AddClass("ent-expandable-closed", _animationState == EntExpandableAnimationState.Closed)
        .AddClass("ent-expandable-opened", _animationState == EntExpandableAnimationState.Opened)
        .AddClass("ent-expandable-closing", _animationState == EntExpandableAnimationState.Closing)
        .AddClass("ent-expandable-opening", _animationState == EntExpandableAnimationState.Opening)
        .Build();

    private string RootStyle => StyleBuilder
        .AddStyle("transition: all 0.25s ease-in-out", _animationState is EntExpandableAnimationState.Closing or EntExpandableAnimationState.Opening)
        .AddStyle($"height : auto", _animationState == EntExpandableAnimationState.Opened)
        .AddStyle($"height : 0px", _animationState == EntExpandableAnimationState.Closed)
        .AddStyle($"height : {_height}px", _animationState is EntExpandableAnimationState.Closing or EntExpandableAnimationState.Opening)
        .Build();




    // Parameters
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Expanded
    {
        get => _expanded;
        set
        {
            if (_expanded == value)
                return;
            _expanded = value;

            if (FirstRendered)
            {
                _animationState = _expanded ? EntExpandableAnimationState.Opening : EntExpandableAnimationState.Closing;
                _ = UpdateHeight();
                _updateHeight = true;
            }
            else if (_expanded)
            {
                _animationState = EntExpandableAnimationState.Opened;
            }

            _ = ExpandedChanged.InvokeAsync(_expanded);
        }
    }

    [Parameter]
    public EventCallback<bool> ExpandedChanged { get; set; }
    // protected override async Task OnInitializedAsync()
    // {
    //     _animationState = Expanded switch
    //     {
    //         true => EntExpandableAnimationState.Opened,
    //         false => EntExpandableAnimationState.Closed
    //     };
    // }


    public async Task OnAnimationEnd()
    {
        await Task.Delay(200);
        if (_animationState == EntExpandableAnimationState.Closing)
        {

            _animationState = EntExpandableAnimationState.Closed;
            StateHasChanged();
        }

        if (_animationState == EntExpandableAnimationState.Opening)
        {
            _animationState = EntExpandableAnimationState.Opened;
            StateHasChanged();
        }

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateHeight();
        }
        else if (_updateHeight && _animationState is EntExpandableAnimationState.Closing or EntExpandableAnimationState.Opening)
        {
            _updateHeight = false;
            await UpdateHeight();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }




    internal async Task UpdateHeight()
    {
        try
        {
            if (SharedJsService == null)
                throw new JSException($"SharedJsService Not be Found . please in ject this service in {nameof(EntExpandable)}");

            _height = (await SharedJsService.GetBoundingClientRect(_reference))?.ScrollHeight ?? 0;
        }
        catch (Exception ex) when (ex is JSDisconnectedException or TaskCanceledException)
        {
            _height = 0;
        }

        // if (_height > MaxHeight)
        // {
        //     _height = MaxHeight.Value;
        // }
    }
}