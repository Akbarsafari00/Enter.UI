@namespace Enter.Ui.Components
@inherits Enter.Ui.Cores.Bases.EntInputBase<string>
@using Enter.Ui.Components.Icon
@using System.Diagnostics.CodeAnalysis
@typeparam T

<div @attributes="@AdditionalAttributes" @ref="_elementReference" class="@RootCss" id="@Id">

    <EntInputText @ref="_inputReference" @onclick="@OnInputClickCallback" @onfocusin="@OnInputClickCallback"
                  Disabled="@Disabled" PlaceHolder="@PlaceHolder" class="ent-select-input" UseValidation="false" Readonly="true" @bind-Value="@Text" Icon="@EntIconName.ChevronDown"/>

    <input type="hidden" @bind="@Value"/>

    <EntPopover Open="_showMenu" RelativeWidth="true" Anchor="Origin.BottomCenter" Transform="Origin.TopCenter" PopoverClass="ent-select-popover">

        <div class="ent-select-container">
            @if (DataSources.Any())
            {
                <EntList class="ent-select-list">
                    @foreach (var item in DataSources)
                    {
                        <EntListItem class="ent-select-list-item" @onclick="() => OnItemClickCallback(item)">
                            @if (ItemTemplate == null)
                            {
                                @TextFunc.Invoke(item)
                            }
                            else
                            {
                                @ItemTemplate?.Invoke(item)
                            }
                        </EntListItem>
                    }
                </EntList>
            }
            else
            {
                <p class="ent-select-message">داده ای یافت نشد</p>
            }
        </div>

    </EntPopover>
    <EntOverlay Visible="_showMenu" OnClick="@OnOverlayClickCallback" @ontouchstart="@OnOverlayClickCallback" LockScroll="false"/>
</div>


@code {

    private string RootCss => CssBuilder
        .AddCss("ent-select")
        .AddCss(BaseCss)
        .AddCss(ValidationCss)
        .Build();


    private bool _showMenu = false;
    private string? _tempValue = string.Empty;

    private string? Text { get; set; }

    [Parameter]
    public List<T> DataSources { get; set; } = new();

    [Parameter]
    public Func<T, string> ValueFunc { get; set; }

    [Parameter]
    public Func<T, string> TextFunc { get; set; }

    [Parameter]
    public RenderFragment<T>? ItemTemplate { get; set; }

    private ElementReference _elementReference;
    private EntInputText _inputReference;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_tempValue != CurrentValueAsString)
        {
            if (Value != null)
            {
                var dataSource = DataSources.FirstOrDefault(x => ValueFunc.Invoke(x).Equals(Value));

                if (dataSource != null)
                {
                    SelectItem(dataSource, true);
                }
            }
        }
        await base.OnParametersSetAsync();
    }

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    public ValueTask FocusAsync()
    {
        return _inputReference.FocusAsync();
    }

    private async Task OnInputClickCallback()
    {
        _showMenu = true;
    }

    private void OnOverlayClickCallback()
    {
        _showMenu = false;
    }

    private async Task OnItemClickCallback(T value)
    {
        _showMenu = false;
        SelectItem(value, true);
    }

    private void SelectItem(T value, bool updateTempValue = false)
    {
        if (ValueFunc == null)
            throw new ArgumentNullException("please add ValueFunc parameter to EntSelect");

        CurrentValueAsString = ValueFunc.Invoke(value);

        if (updateTempValue)
        {
            _tempValue = CurrentValueAsString;
        }

        if (TextFunc == null)
            throw new ArgumentNullException("please add TextFunc parameter to EntSelect");

        Text = TextFunc.Invoke(value);
    }

}