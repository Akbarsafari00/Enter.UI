@namespace Enter.UI.Components
@using System.Diagnostics.CodeAnalysis
@using Enter.UI.Components.Icon
@inherits Enter.UI.Cores.Bases.EntInputBase<string?>
@implements IAsyncDisposable

<div @attributes="@AdditionalAttributes" class="@RootCss" id="@Id">
    <input name="@ValueExpression?.GetPropertyName()" type="file" class="ent-input-field" placeholder="@PlaceHolder"
    @bind="@CurrentValueAsString"
    @bind:event="oninput" disabled="@Disabled" readonly="@Readonly"/>

    @if (Icon != null)
    {
        <div class="ent-input-icon">
            <EntIcon IconSize="EntIconSize.Medium" Icon="@Icon" class="icon" />
        </div>
    }
</div>

@code {

    private string RootCss => CssBuilder
        .AddCss("ent-input")
        .AddCss(BaseCss)
        .AddCss(ValidationCss)
        .Build();

    [Parameter]
    public object Icon { get; set; }

    [Parameter]
    public bool IsPassword { get; set; } = false;

    [CascadingParameter]
    public EditContext? EditContext { get; set; }


    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

}