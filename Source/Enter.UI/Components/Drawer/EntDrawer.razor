@namespace Enter.Ui.Components
@using Enter.Ui.Components.Drawer
@inherits Enter.Ui.Cores.Bases.EntComponentBase


<aside class="@RootCss">@ChildContent</aside>
<EntOverlay Visible="HasBackdrop" DarkBackground="true" OnClick="@OnOverlayClickCallback" @ontouchstart="@OnOverlayClickCallback" LockScroll="false"/>

@code {

    public string RootCss => CssBuilder
        .AddCss("ent-drawer")
        .AddCss("ent-drawer--direction-start", Direction == EntDrawerDirection.Start)
        .AddCss("ent-drawer--direction-end", Direction == EntDrawerDirection.End)
        .AddCss("ent-drawer--mode-behavior", Mode == EntDrawerMode.Behavior)
        .AddCss("ent-drawer--mode-overlay", Mode == EntDrawerMode.Overlay)
        .AddCss("ent-drawer--open", Open)
        .AddCss("ent-drawer--close", !Open)
        .Build();

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EntDrawerDirection Direction { get; set; } = EntDrawerDirection.Start;

    [Parameter]
    public EntDrawerMode Mode { get; set; } = EntDrawerMode.Behavior;

    [CascadingParameter]
    public EntDrawerContainer? DrawerContainer { get; set; }

    private bool _open = false;

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public bool HasBackdrop { get; set; }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }


    private async Task OnOverlayClickCallback()
    {
        Open = false;
        HasBackdrop = false;
        await OpenChanged.InvokeAsync(Open);
        StateHasChanged();
    }

    public override void Dispose()
    {
    }

}