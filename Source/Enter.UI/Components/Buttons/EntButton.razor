@namespace Enter.UI.Components
@using Enter.UI.Abstractions.Components.Button
@using Enter.UI.Abstractions.Components.Icon
@inherits EntComponentBase

<button @attributes="@AdditionalAttributes" disabled="@Disabled" class="@RootClass">
    @if (Icon != null && !Loading)
    {
        <span class="icon-wrapper">
            <EntIcon class="icon" Icon="@Icon" IconSize="EntIconSize.Default" IconStyle="EntIconStyle.Light"/>
        </span>
    }
    
    @if (Loading)
    {
        <span class="icon-wrapper">
            <EntCircularLoading Animate="Loading" class="icon ent-btn-loading"/>
        </span>
    }
    @ChildContent

</button>

@code {

    private string RootClass => CssClassBuilder

        .AddClass("ent-btn")
        
        .AddClass("ent-btn-size-lg",Size == ButtonSize.Large)
        .AddClass("ent-btn-size-md", Size == ButtonSize.Medium)
        .AddClass("ent-btn-size-sm", Size == ButtonSize.Small)
        
        .AddClass("ent-btn-outline",Appearance==ButtonAppearance.Outline)
        .AddClass("ent-btn-subtle",Appearance==ButtonAppearance.Subtle)
        .AddClass("ent-btn-ghost",Appearance==ButtonAppearance.Ghost)
        
        .AddClass("ent-btn-primary", Color == ButtonColor.Primary )
        
        .AddClass("ent-btn-only-icon", Icon != null && ChildContent == null)
        .AddClass("ent-btn-disabled", Disabled )
        
        .Build();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public ButtonSize Size { get; set; } = ButtonSize.Medium;
    
    [Parameter]
    public ButtonAppearance Appearance { get; set; } = ButtonAppearance.Default;
    
    [Parameter]
    public ButtonColor Color { get; set; } = ButtonColor.Default;

    [Parameter]
    public object? Icon { get; set; }

    [Parameter]
    public bool Loading { get; set; } = false;
    
    [Parameter]
    public bool Disabled { get; set; } = false;

  
    public override void Dispose()
    {
    }

}