@namespace Enter.UI.Components
@using Enter.UI.Abstractions.Components.Button
@using Enter.UI.Abstractions.Components.Icon
@inherits EntComponentBase
<button @attributes="@AdditionalAttributes" class="@RootClass">
    @if (Icon != null && !Loading)
    {
        <EntIcon Icon="@Icon" IconSize="EntIconNameize.Default" IconStyle="EntIconStyle.Light"/>
    }
    @if (Loading)
    {
        <span class="ent-btn-loading"></span>
    }
    @ChildContent

</button>

@code {

    private string RootClass => CssClassBuilder
        .AddClass("ent-btn")
        .AddClass("ent-btn-lg", Size == ButtonSize.Large)
        .AddClass("ent-btn-sm", Size == ButtonSize.Small)
        .AddClass("ent-btn-primary", Color == ButtonColor.Primary)
        .AddClass("ent-btn-secondary", Color == ButtonColor.Secondary)
        .AddClass("ent-btn-light", Color == ButtonColor.Light)
        .AddClass("ent-btn-dark", Color == ButtonColor.Dark)
        .AddClass("ent-btn-success", Color == ButtonColor.Success)
        .AddClass("ent-btn-danger", Color == ButtonColor.Danger)
        .AddClass("ent-btn-warning", Color == ButtonColor.Warning)
        .AddClass("ent-btn-info", Color == ButtonColor.Info)
        .AddClass("ent-btn-outline", IsOutline)
        .Build();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public ButtonSize Size { get; set; } = ButtonSize.Default;

    [Parameter]
    public bool IsOutline { get; set; } = false;

    [Parameter]
    public ButtonColor Color { get; set; } = ButtonColor.Primary;

    [Parameter]
    public object? Icon { get; set; }

    [Parameter]
    public bool Loading { get; set; } = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var attr = AdditionalAttributes;
        }
        base.OnAfterRender(firstRender);
    }

    public override void Dispose()
    {
        
    }

}