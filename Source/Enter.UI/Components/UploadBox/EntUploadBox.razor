@namespace Enter.UI.Components
@using Microsoft.JSInterop;
@using Enter.UI.Components.Animator
@using Enter.UI.Components.Button
@using Enter.UI.Components.Expandable
@using Enter.UI.Components.Icon
@using Enter.UI.JsServices
@inherits EntComponentBase

<div
    @attributes="@AdditionalAttributes"
    id="@Id"
    class="@RootCss">
    
    <label class="upload-container" for="upload-box">
        <span>@PlaceHolder</span>
    </label>
    <InputFile  id="upload-box" class="d-none" multiple="@Multiple" OnChange="OnFileChange2"></InputFile>
    <ul class="files-container">
        @foreach (var file in Files)
        {
            <li class="file-item">
                <span class="file-item-icon">
                    @if (file.DataUrl != string.Empty)
                    {
                        <img src="@($"data:{file.ContentType};base64,{file.DataUrl}")"/>
                    }
                    else
                    {
                        <EntIcon Icon="@("ri-file-line")"></EntIcon>
                    }
                </span>
                <div class="file-item-content">
                    <b>@file.Name</b>
                    <small>@file.ContentType</small>
                </div>
                <div class="file-item-action">
                    <EntButton Icon="EntIconName.Delete" @onclick="()=>RemoveItem(file)"/>
                </div>
            </li>
        }
    </ul>
    
</div>

@code {


    [Parameter]
    public List<UploadModel> Files { get; set; } = new List<UploadModel>();

    [Parameter]
    public EventCallback<List<UploadModel>> FilesChanged { get; set; }

    // Style and Css
    private string RootCss => CssClassBuilder
        .AddClass("ent-upload-box")
        .Build();

    [Parameter]
    public string PlaceHolder { get; set; } = string.Empty;
    
    [Parameter]
    public bool Multiple { get; set; }
    
    public override void Dispose()
    {
    }
    
   

    private async Task OnFileChange2(InputFileChangeEventArgs e)
    {
        try
        {
            
            foreach (var file in e.GetMultipleFiles(e.FileCount))
            {
                
                var imageBase64 = string.Empty;
                if (file.ContentType.Contains("image/"))
                {
                    var resizedImageFile = await file.RequestImageFileAsync(file.ContentType,100, 100);
                    var buffer = new byte[resizedImageFile.Size];
                    await resizedImageFile.OpenReadStream().ReadAsync(buffer);
                    imageBase64 = Convert.ToBase64String(buffer);


                }
                var fileModel = new UploadModel()
                {
                    Name = file.Name,
                    Extensions = file.Name.Split(".").Last(),
                    ContentType = file.ContentType,
                    Size = file.Size,
                    IsSent = false,
                    DataUrl = imageBase64
                };
                Files.Add(fileModel);
            }
            await FilesChanged.InvokeAsync(Files);
            _ = InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            _ = InvokeAsync(StateHasChanged);
        }

    }

    private async Task RemoveItem(UploadModel model)
    {
        Files.Remove(model);
        await FilesChanged.InvokeAsync(Files);
    }

}