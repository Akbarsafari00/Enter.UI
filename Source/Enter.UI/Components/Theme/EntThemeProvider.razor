@using Microsoft.JSInterop
@using Enter.UI.JsServices
@using System.Runtime.CompilerServices
@namespace Enter.UI.Components

<CascadingValue Value="this" IsFixed="true">
    <div dir="@Direction" class="@RootCss">
         @if (_componentReady)
         {
             @ChildContent
         }
    </div>
</CascadingValue>

<style>
    :root {
      --ent-drawer-width : @(@DrawerDefaultWidth)px;  
    }
</style>

@code {

    private bool _componentReady = false;


    private string Direction => RtlMode ? "rtl" : "ltr";

    protected string RootCss =>new CssBuilder()
        .AddCss("ent-ui vertical-scroll")
        .AddCss("ent-rtl",RtlMode)
        .AddCss("ent-ltr",!RtlMode)
        .AddCss("ent-theme-dark",DarkMode)
        .AddCss("ent-theme-responsive",ResponsiveMode)
        .Build();

    [Inject]
    private IEntSharedJsService SharedJsService { get; set; } = default!;

    [Inject]
    private IEntJsService EntJsService { get; set; } = default!;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {

            var objRef = DotNetObjectReference.Create(this);
            await SharedJsService.InitializeBreakpointEventAsync(objRef).ConfigureAwait(false);

            CurrentBreakPoint = await SharedJsService.GetBreakpointAsync().ConfigureAwait(false);

            if (ResponsiveMode == false && CurrentBreakPoint <= EntBreakpoint.Tablet)
            {
                await SetResponsiveModeAsync(true).ConfigureAwait(false);
            }
            
            await SetDarkModeAsync(DarkMode, updateRender: false).ConfigureAwait(false);
            Console.WriteLine("---------------- EntThemePtovider (OnInitializedAsync) ----------------");
            Console.WriteLine("CurrentBreakPoint : " + CurrentBreakPoint);
            Console.WriteLine("ResponsiveMode : " + ResponsiveMode);
            Console.WriteLine("DarkMode : " + DarkMode);
            Console.WriteLine("RtlMode : " + RtlMode);

            _componentReady = true;
            StateHasChanged();

        }
        
        await base.OnAfterRenderAsync(firstRender);
        
    }
    
    

    #region RtlMode

    public bool RtlMode { get; set; } = false;
    
    public void EnableRtl()
    {
        RtlMode = true;
        StateHasChanged();
    }
    
    public void DisableRtl()
    {
        RtlMode = false;
        StateHasChanged();
    }
    
    public void SetRtl(bool enable)
    {
        if (enable)
        {
            EnableRtl();
        }
        else
        {
            DisableRtl();
        }
    }
    
    public void ToggleRtl()
    {
        SetRtl(!RtlMode);
    }

    #endregion

    #region DarkMode
    
    public bool DarkMode { get; set; } = false;
    
    public async Task EnableDarkModeAsync(bool updateRender = true)
    {
        DarkMode = true;
        await SharedJsService.SetAttributeByQuerySelectorAsync("html","data-theme", "dark");
        if (updateRender)
        {
            StateHasChanged();
        }
    }
    public async Task DisableDarkModeAsync(bool updateRender = true)
    {
        DarkMode = false;
        await SharedJsService.SetAttributeByQuerySelectorAsync("html","data-theme", "light");
        if (updateRender)
        {
            StateHasChanged();
        }
    }
    public async Task SetDarkModeAsync(bool enable, bool updateRender = true)
    {
        if (enable)
        {
            await EnableDarkModeAsync(updateRender);
        }
        else
        {
            await DisableDarkModeAsync(updateRender);
        }
    }
    public async Task ToggleDarkModeAsync()
    {
        await SetDarkModeAsync(!DarkMode);
    }

    #endregion

    #region ResponsiveMode
    

    public bool ResponsiveMode { get; set; } 
    
    public async Task EnableResponsiveModeAsync( bool updateRender = true)
    {
        ResponsiveMode = true;
        await SharedJsService.SetAttributeByQuerySelectorAsync("html","data-theme-responsive", "true");
        if (updateRender)
        {
            StateHasChanged();
        }
    }
    
    public async Task DisableResponsiveModeAsync( bool updateRender = true)
    {
        ResponsiveMode = false;
        await SharedJsService.SetAttributeByQuerySelectorAsync("html","data-theme-responsive", "false");
        if (updateRender)
        {
            StateHasChanged();
        }
    }
    public  bool GetResponsiveModeAsync()
    {
        return CurrentBreakPoint <= EntBreakpoint.Tablet;
    }
    
    public async Task SetResponsiveModeAsync(bool enable , bool updateRender = true)
    {
        if (enable)
        {
            await EnableResponsiveModeAsync(updateRender);
        }
        else
        {
            await DisableResponsiveModeAsync(updateRender);
        }
    }
    public async Task ToggleResponsiveModeAsync()
    {
        await SetResponsiveModeAsync(!ResponsiveMode);
    }

    #endregion

    #region Breakpoint

    public  EntBreakpoint CurrentBreakPoint { get; set; }


    public  Task<EntBreakpoint> GetBreakpointAsync()
    {
        return SharedJsService.GetBreakpointAsync();
    }
    
    [JSInvokable("OnBreakpointEventListener")]
    public void OnBreakpointEventListener(string breakpoint)
    {
        if (breakpoint  == CurrentBreakPoint.ToString()) return;
        
        CurrentBreakPoint = Enum.Parse<EntBreakpoint>(breakpoint);
        
        // StateHasChanged();
    }

    #endregion

    #region Drawer

    [Parameter]
    public int DrawerDefaultWidth { get; set; } = 260;

    #endregion


}