@namespace Enter.UI.Components
@using Enter.UI.Abstractions.Services
@implements IDisposable
<div class="ent-modal-provider ">
    @foreach (var item in @_modalService.Items)
    {
        <CascadingValue Value="item" IsFixed="true">
            <EntModal Title="@item.Title" OnCancelClick="() => OnCancelClick(item.Id)" Options="item.Options">
                <DynamicComponent Type="@item.Type" Parameters="@item.Parameters"/>
            </EntModal>
        </CascadingValue>
    }
</div>

@code {

    [Inject]
    private IEntModalService ModalService { get; set; }

    private ModalService _modalService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _modalService = (ModalService)ModalService ?? throw new InvalidOperationException("AddEnterUI is not added to your program.cs");

        await base.OnInitializedAsync();

        _modalService.OnModalShowedAsync += ModalServiceOnOnModalShowedAsync;
        _modalService.OnModalClosedAsync += ModalServiceOnOnModalClosedAsync;
        _modalService.OnModalCanceledAsync += ModalServiceOnOnModalCanceledAsync;
        ;
    }

    private async Task ModalServiceOnOnModalCanceledAsync(string obj)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task ModalServiceOnOnModalClosedAsync(string obj)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task ModalServiceOnOnModalShowedAsync(string obj)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCloseClick(string id)
    {
        await _modalService.CloseAsync(id);
    }

    private async Task OnCancelClick(string id)
    {
        await _modalService.CancelAsync(id);
    }

    public void Dispose()
    {
        _modalService.OnModalShowedAsync -= ModalServiceOnOnModalShowedAsync;
        _modalService.OnModalClosedAsync -= ModalServiceOnOnModalClosedAsync;
        _modalService.OnModalCanceledAsync -= ModalServiceOnOnModalCanceledAsync;
    }

}