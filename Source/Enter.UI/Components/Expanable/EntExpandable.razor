@namespace Enter.UI.Components
@using Microsoft.JSInterop;
@using Enter.UI.Components.Animator
@using Enter.UI.Components.Expandable
@using Enter.UI.JsServices
@inherits Enter.UI.Cores.Bases.EntComponentBase

<EntAnimator
        @attributes="@AdditionalAttributes"
        @ref="Reference"
        id="@Id"
        class="@RootCss"
        style="@RootStyle"
        @bind-State="AnimationState"
        OnAnimationEnd="OnAnimationEnd">
    @ChildContent
</EntAnimator>

@code {

    private EntAnimatorState AnimationState { get; set; } = EntAnimatorState.End;
    private bool _expanded, _updateHeight;
    private double _size = 0;
    private EntExpandableDirection _direction = EntExpandableDirection.Vertical;
    private string _cssProperty = "height";
    
    internal EntAnimator Reference { get; set; }

    [Inject]
    internal IEntSharedJsService? SharedJsService { get; set; }

    // Style and Css
    private string RootCss => CssBuilder
        .AddCss("ent-expandable")
        .AddCss("ent-expandable-horizontal", Direction == EntExpandableDirection.Horizontal)
        .AddCss("ent-expandable-vertical", Direction == EntExpandableDirection.Vertical)
        .AddCss("ent-expandable-closed", AnimationState == EntAnimatorState.End)
        .AddCss("ent-expandable-opened", AnimationState == EntAnimatorState.Start)
        .AddCss("ent-expandable-closing", AnimationState == EntAnimatorState.Ending)
        .AddCss("ent-expandable-opening", AnimationState == EntAnimatorState.Starting)
        .Build();

    private string RootStyle => StyleBuilder
        .AddStyle("transition: all 0.25s ease-in-out", AnimationState is EntAnimatorState.End or EntAnimatorState.Starting)
        .AddStyle($"{_cssProperty} : auto", AnimationState == EntAnimatorState.Start)
        .AddStyle($"{_cssProperty} : 0px", AnimationState == EntAnimatorState.End)
        .AddStyle($"{_cssProperty} : {_size}px", AnimationState is EntAnimatorState.Ending or EntAnimatorState.Starting)
        .Build();

    // Parameters
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EntExpandableDirection Direction
    {
        get => _direction;
        set
        {
            _cssProperty = value == EntExpandableDirection.Horizontal ? "width" : "height";
            _direction = value;
        }
    }

    [Parameter]
    public bool Expanded
    {
        get => _expanded;
        set
        {
            if (_expanded == value)
                return;
            _expanded = value;

            if (FirstRendered)
            {
                AnimationState = _expanded ? EntAnimatorState.Starting : EntAnimatorState.Ending;
                _ = UpdateSize();
                _updateHeight = true;
            }
            else if (_expanded)
            {
                AnimationState = EntAnimatorState.Start;
            }

            _ = ExpandedChanged.InvokeAsync(_expanded);
        }
    }

    [Parameter]
    public EventCallback<bool> ExpandedChanged { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     _animationState = Expanded switch
    //     {
    //         true => EntExpandableAnimationState.Opened,
    //         false => EntExpandableAnimationState.Closed
    //     };
    // }


    public Task OnAnimationEnd()
    {
        switch (AnimationState)
        {
            case EntAnimatorState.Ending:
                AnimationState = EntAnimatorState.End;
                StateHasChanged();
                break;
            case EntAnimatorState.Starting:
                AnimationState = EntAnimatorState.Start;
                StateHasChanged();
                break;
            case EntAnimatorState.Start:
                break;
            case EntAnimatorState.End:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        return Task.CompletedTask;
    }
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await UpdateSize();
        }
        
        else if (_updateHeight && AnimationState is EntAnimatorState.Ending or EntAnimatorState.Starting)
        {
            _updateHeight = false;
            await UpdateSize();
            StateHasChanged();
        }

    }


    internal async Task UpdateSize()
    {
        try
        {
            if (SharedJsService == null)
                throw new JSException($"SharedJsService Not be Found . please in ject this service in {nameof(EntExpandable)}");

            var reactBounding = await SharedJsService.GetBoundingClientRectAsync(Reference.Reference);
            if (Direction == EntExpandableDirection.Vertical)
            {
                _size = reactBounding?.ScrollHeight ?? 0;
            }
            else
            {
                _size = reactBounding?.ScrollWidth ?? 0;
            }
        }
        catch (Exception ex) when (ex is JSDisconnectedException or TaskCanceledException)
        {
            _size = 0;
        }

    }

    public override void Dispose()
    {
        
    }

}