@namespace Enter.UI.Components
@using System.Diagnostics.CodeAnalysis
@using Enter.UI.Abstractions.Components.Icon
@inherits EntComponentBase


<ul @attributes="@AdditionalAttributes" class="@RootClass">
    @if (ShowFirstButton)
    {
        <li class="ent-pagination-item" @onclick="@(() => OnClickControlButton(Page.First))">
            <EntIcon Icon="@EntIconName.ChevronLeft"  aria-label="First page"/>
        </li>
    }
    @if (ShowPreviousButton)
    {
        <li class="ent-pagination-item" @onclick="@(() => OnClickControlButton(Page.Previous))">
            <EntIcon Icon="@EntIconName.ChevronLeft"  aria-label="First page"/>
        </li>
    }
    @foreach(var state in GeneratePagination())
    {
        var currentPage = state;
        if (currentPage == -1)
        {
            <li class="ent-pagination-item disable">
                <EntText >...</EntText>
            </li>
        }
        else if (currentPage == Selected)
        {
            <li class="ent-pagination-item active">
                <EntText>@currentPage</EntText>
            </li>
        }
        else {
            <li class="ent-pagination-item" @onclick="@(() => Selected = currentPage)" >
                <EntText >@currentPage</EntText>
            </li>
        }
    }

    @if (ShowNextButton)
    {
        <li class="ent-pagination-item" @onclick="@(() => OnClickControlButton(Page.Next))" >
            <EntIcon Icon="@EntIconName.ChevronRight" aria-label="Next page"/>
        </li>
    }
    @if (ShowLastButton)
    {
        <li class="ent-pagination-item" @onclick="@(() => OnClickControlButton(Page.Last))">
            <EntIcon Icon="@EntIconName.ChevronRight"  aria-label="Last page"/>
        </li>
    }
</ul>

@code {

    private int _middleCount = 3;
    private int _boundaryCount = 2;
    private bool _selectedFirstSet;
    private int _selected = 1;
    
    private string RootClass => CssClassBuilder
        .AddClass("ent-pagination")
        .Build();



    private int _count = 1;
    [Parameter]
    public int Count
    {
        get => _count;
        set
        {
            _count = Math.Max(1, value);
            Selected = Math.Min(Selected, _count);
        }
    }
    
    


    /// <summary>
    /// The number of items at the start and end of the pagination.
    /// </summary>
    [Parameter]
    public int BoundaryCount
    {
        get => _boundaryCount;
        set
        {
            _boundaryCount = Math.Max(1, value);
        }
    }

    /// <summary>
    /// The number of items in the middle of the pagination.
    /// </summary>
    [Parameter]
    public int MiddleCount
    {
        get => _middleCount;
        set
        {
            _middleCount = Math.Max(1, value);
        }
    }


    
    
    
    [Parameter]
    public int Selected
    {
        get => _selected;
        set
        {
            if (_selected == value)
                return;

    //this is required because _selected will stay 1 when Count is not yet set
            if (!_selectedFirstSet)
            {
                _selected = value;
                _selectedFirstSet = true;
            }
            else
                _selected = Math.Max(1, Math.Min(value, Count));

            SelectedChanged.InvokeAsync(_selected);
        }
    }

    [Parameter]
    public EventCallback<int> SelectedChanged { get; set; }


    [Parameter]
    public EventCallback<Page> ControlButtonClicked { get; set; }
    
    [Parameter]
    public bool ShowFirstButton { get; set; }

    [Parameter]
    public bool ShowPreviousButton { get; set; }

    [Parameter]
    public bool ShowNextButton { get; set; }

    [Parameter]
    public bool ShowLastButton { get; set; }

     private IEnumerable<int> GeneratePagination()
        {
            //return array {1, ..., Count} if Count is small 
            if (Count <= 4 || Count <= 2 * BoundaryCount + MiddleCount + 2)
                return Enumerable.Range(1, Count).ToArray();

            var length = 2 * BoundaryCount + MiddleCount + 2;
            var pages = new int[length];

            //set start boundary items, e.g. if BoundaryCount == 3 => [1, 2, 3, ...]
            for (var i = 0; i < BoundaryCount; i++)
            {
                pages[i] = i + 1;
            }

            //set end boundary items, e.g. if BoundaryCount == 3 and Count == 11 => [..., 9, 10, 11]
            for (var i = 0; i < BoundaryCount; i++)
            {
                pages[length - i - 1] = Count - i;
            }

            //calculate start value for middle items
            int startValue;
            if (Selected <= BoundaryCount + MiddleCount / 2 + 1)
                startValue = BoundaryCount + 2;
            else if (Selected >= Count - BoundaryCount - MiddleCount / 2)
                startValue = Count - BoundaryCount - MiddleCount;
            else
                startValue = Selected - MiddleCount / 2;

            //set middle items, e.g. if MiddleCount == 3 and Selected == 5 and Count == 11 => [..., 4, 5, 6, ...] 
            for (var i = 0; i < MiddleCount; i++)
            {
                pages[BoundaryCount + 1 + i] = startValue + i;
            }

            //set start delimiter "..." when selected page is far enough to the end, dots are represented as -1
            pages[BoundaryCount] = (BoundaryCount + MiddleCount / 2 + 1 < Selected) ? -1 : BoundaryCount + 1;

            //set end delimiter "..." when selected page is far enough to the start, dots are represented as -1
            pages[length - BoundaryCount - 1] = (Count - BoundaryCount - MiddleCount / 2 > Selected) ? -1 : Count - BoundaryCount;

            //remove ellipsis if difference is small enough, e.g convert [..., 5 , -1 , 7, ...] to [..., 5, 6, 7, ...]
            for (var i = 0; i < length - 2; i++)
            {
                if (pages[i] + 2 == pages[i + 2])
                    pages[i + 1] = pages[i] + 1;
            }

            return pages;
        }
    
    
    private void OnClickControlButton(Page page)
    {
        ControlButtonClicked.InvokeAsync(page);
        NavigateTo(page);
    }

    [ExcludeFromCodeCoverage]
    public void NavigateTo(Page page)
    {
        Selected = page switch
        {
            Page.First => 1,
            Page.Last => Math.Max(1, Count),
            Page.Next => Math.Min(Selected + 1, Count),
            Page.Previous => Math.Max(1, Selected - 1),
            _ => Selected
            };
    }

    public override void Dispose()
    {
        
    }

}