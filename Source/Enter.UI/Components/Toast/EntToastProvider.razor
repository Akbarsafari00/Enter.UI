@namespace Enter.UI.Components
@inherits EntComponentBase
@using Enter.UI.Components.Toast
@using Enter.UI.Core
@using Enter.UI.Services
@using Enter.UI.Components.Animator
@using Enter.UI.Components.Icon
@using Enter.UI.Components.Text

<div class="@RootClass">
    <EntSpace SpaceY="2">


        @foreach (var item in ToastInstances)
        {
            var itemCss = new CssClassBuilder("ent-toast")
                .AddClass("ent-toast--open", item.AnimatorState == EntAnimatorState.Starting)
                .AddClass("ent-toast--close", item.AnimatorState == EntAnimatorState.Ending)
                .AddClass("bg-success cl-light", item.Options.Type == EntToastType.Success)
                .AddClass("bg-danger cl-light", item.Options.Type == EntToastType.Danger)
                .AddClass("bg-owarning cl-light", item.Options.Type == EntToastType.Warning)
                .AddClass("bg-info cl-light", item.Options.Type == EntToastType.Info).Build();

            <EntAnimator
                @key="item.Key"
                OnAnimationEnd="() => OnToastAnimationEnd(item)"
                class="@itemCss"
                @bind-State="@item.AnimatorState">

                <div class=" items-center">

                    <div class="flex-grow-1 d-flex flex-column justify-center">
                        <div class="d-flex flex-row gap-4 mb-4">
                            @if (item.Options.Icon != null)
                            {
                                <EntIcon Icon="@item.Options.Icon"/>
                            }
                            <EntText class="flex-grow-1 p-0 m-0" Type="EntTextType.Bold" Size="EntTextSize.Caption">@item.Title</EntText>
                            <EntIcon Icon="EntIconName.Remove" Click="() => CloseItem(item)"/>
                        </div>
                        <EntText class="p-0 m-0" Type="EntTextType.Paragraph" Size="EntTextSize.Description">@item.Content</EntText>
                    </div>
                </div>
            </EntAnimator>
        }
    </EntSpace>
</div>

@code {

    private string RootClass => CssClassBuilder
        .AddClass("ent-toast-provider")
        .Build();


    public readonly List<EntToastInstance> ToastInstances = new();

    [Inject]
    public IEntToastService EntToastService { get; set; }

    private EntToastService _entToastService = default!;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _entToastService = (EntToastService)EntToastService;

        _entToastService.InstanceCreatedAsync += EntToastServiceOnInstanceCreatedAsync;
        _entToastService.InstanceCloseAsync += EntToastServiceOnInstanceCloseAsync;
        ;
    }

    private async Task EntToastServiceOnInstanceCloseAsync(Guid e)
    {
        await InvokeAsync((() =>
        {
            var instance = ToastInstances.FirstOrDefault(x => x.Id == e);
            if (instance == null) return;

            CloseItem(instance);
            StateHasChanged();
        }));
    }

    private async Task EntToastServiceOnInstanceCreatedAsync(EntToastInstance instance)
    {
       await InvokeAsync(() =>
        {
            var delayMilliseconds = (long)instance.Options.DelaySpan.TotalMilliseconds;

            if (delayMilliseconds <= 0) delayMilliseconds = 3000; // Set a default delay of 1 second (1000 milliseconds)

            ToastInstances.Add(instance);
            StateHasChanged();

            _ = new Timer( s =>
            {
                InvokeAsync(async () =>
                {
                    await EntToastService.CloseAsync(instance.Id);
                    StateHasChanged();
                });
            }, null, delayMilliseconds, Timeout.Infinite);
        });
    }


    private void CloseItem(EntToastInstance instance)
    {
        instance.AnimatorState = EntAnimatorState.Ending;
    }

    private async Task OnToastAnimationEnd(EntToastInstance instance)
    {
        if (instance.AnimatorState == EntAnimatorState.Ending)
        {
            ToastInstances.Remove(instance);
            await EntToastService.CloseAsync(instance.Id);
        }
    }



    public override void Dispose()
    {
        _entToastService.InstanceCreatedAsync -= EntToastServiceOnInstanceCreatedAsync;
        _entToastService.InstanceCloseAsync -= EntToastServiceOnInstanceCloseAsync;
    }

}