@namespace Enter.Ui.Components

@typeparam TValue
@using Enter.Ui.Cores.Core
@using Enter.Ui.Components.TreeView
@inherits Enter.Ui.Bases.EntBaseComponent


@if (Tag == "MultiSelect TreeView")
{
    Console.WriteLine("EntTreeView Renderd");
}
<CascadingValue Value="this" IsFixed="true">
    <ul @attributes="@AdditionalAttributes" class="@ClassNames">
        @if (DataSource != null)
        {
            @foreach (var item in DataSource)
            {
                <EntTreeViewItem Item="@item"/>
            }
        }
    </ul>
</CascadingValue>


@code {

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-treeview");
        base.BuildClasses(builder);
    }

    protected override Task OnParametersSetAsync()
    {
        ClassBuilder?.CanUpdate();
        StyleBuilder?.CanUpdate();
        return base.OnParametersSetAsync();
    }

    [Parameter]
    public bool MultiSelect { get; set; } = false;
    
    [Parameter]
    public bool AutoExpand { get; set; } = false;
    
    [Parameter]
    public bool AutoParentSelect { get; set; } = false;
    
    [Parameter]
    public bool AutoChildSelect{ get; set; } = false;
    
    [Parameter]
    public TValue? SelectedValue { get; set; }

    [Parameter]
    public EventCallback<TValue?> SelectedValueChanged { get; set; }

    [Parameter]
    public List<TValue> SelectedValues { get; set; } = new();

    [Parameter]
    public EventCallback<List<TValue>> SelectedValuesChanged { get; set; }

    [Parameter]
    public EntTreeViewSelectMode SelectMode { get; set; } = EntTreeViewSelectMode.Select;

    [Parameter]
    public IEnumerable<EntSelectItem<TValue>>? DataSource { get; set; }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    public async Task Select(TValue value)
    {
        if (MultiSelect)
        {
            if (SelectedValues.All(x=>! x.Equals(value)))
            {
                SelectedValues.Add(value);
                await SelectedValuesChanged.InvokeAsync(SelectedValues);
            }
        }
        else
        {
            SelectedValue = value;
            await SelectedValueChanged.InvokeAsync(SelectedValue);
        }
    }

    public async Task DeSelect(TValue value)
    {
        if (MultiSelect)
        {
            SelectedValues.RemoveAll(x => x != null && x.Equals(value));
            await SelectedValuesChanged.InvokeAsync(SelectedValues);
        }
        else
        {
            SelectedValue = default;
            await SelectedValueChanged.InvokeAsync(SelectedValue);
        }
    }

    public new void StateHasChanged()
    {
        base.StateHasChanged();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}