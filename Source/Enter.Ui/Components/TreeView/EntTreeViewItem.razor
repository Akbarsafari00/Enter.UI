@namespace Enter.Ui.Components
@typeparam TValue
@using Enter.Ui.Cores.Core
@using Enter.Ui.Components.Icon
@inherits Enter.Ui.Bases.EntBaseComponent

@if (_readyForRender)
{
    <CascadingValue Value="this" IsFixed="true">
        <li @attributes="@AdditionalAttributes" class="@ClassNames" @onclick="() => Select()" @onclick:stopPropagation>

            <div class="ent-treeview-item-list-icon" @onclick="OnItemExpandClickCallback" @onclick:stopPropagation>
                @if (Item.Childrens != null && Item.Childrens.Any())
                {
                    <EntIcon IconSize="EntIconSize.Medium" Icon="@EntIconName.ChevronDown"/>
                }
            </div>

            @if (TreeView.MultiSelect)
            {
                <InputCheckbox class="ent-treeview-item-checkbox" Value="@Checked"
                               ValueExpression="() => Checked"/>
            }

            @if (Item.Icon != null)
            {
                <div class="ent-treeview-item-icon">
                    <EntIcon IconSize="EntIconSize.Medium" Icon="@Item.Icon"/>
                </div>
            }
            <span class="ent-treeview-item-text">
                @Item.Text
            </span>

        </li>


        @if (Item.Childrens != null && Item.Childrens.Any())
        {
            <EntExpandable @bind-Expanded="Expanded" class="ent-treeview-childrens">

                @foreach (var item in Item.Childrens)
                {
                    <EntTreeViewItem Item="@item"/>
                }

            </EntExpandable>
        }
    </CascadingValue>
}

@code {
    public override string ComponentName => this.GetType().Name;
    private bool _readyForRender = false;

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-treeview-item")
            .AddClass("active", !TreeView.MultiSelect && Checked)
            .AddClass("expanded", Expanded);
        base.BuildClasses(builder);
    }

    protected override Task OnParametersSetAsync()
    {
        ClassBuilder?.CanUpdate();
        StyleBuilder?.CanUpdate();
        return base.OnParametersSetAsync();
    }

    [CascadingParameter]
    public EntTreeView<TValue> TreeView { get; set; } = default!;

    [CascadingParameter]
    public EntTreeViewItem<TValue>? ParentItem { get; set; } = null;

    protected readonly ICollection<EntTreeViewItem<TValue>> ChildItems = new List<EntTreeViewItem<TValue>>();

    public bool Expanded { get; set; }

    private bool HaveParentItem => ParentItem != null;

    public event Action<TValue?> OnValueChange = default!;

    private bool Checked => TreeView.MultiSelect
        ? TreeView.SelectedValues.Contains(Item.Value)
        : TreeView.SelectedValue?.Equals(Item.Value) ?? false;

    [Parameter]
    public EntSelectItem<TValue> Item { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        ParentItem?.ChildItems.Add(this);

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
     
        if (firstRender)
        {
            if (Checked)
            {
                Expand();
            }

            _readyForRender = true;
            StateHasChanged();
            
           

        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Select(bool? check = null, bool selectChildren = true)
    {
        check ??= Checked;

        if (ChildItems.Any() && IsMultiSelect && selectChildren && TreeView.AutoChildSelect)
        {
            foreach (var treeViewItem in ChildItems)
            {
                await treeViewItem.Select(check);
            }
        }

        if (ParentItem != null && IsMultiSelect && TreeView.AutoParentSelect)
        {
            await ParentItem.Select(check, selectChildren: false);
        }
        
        if (check.Value)
        {
            await TreeView.DeSelect(Item.Value);

            if (TreeView.AutoExpand)
            {
                Collapse();
            }
        }
        else
        {
            await TreeView.Select(Item.Value);
            
            if (TreeView.AutoExpand)
            {
                Expand();
            }
        }

        

        TreeView.StateHasChanged();
    }


    private bool IsMultiSelect => TreeView.MultiSelect;


    public void Expand()
    {
        Expanded = true;
        ParentItem?.Expand();
    }

    public void Collapse()
    {
        Expanded = false;
    // ParentItem?.Collapse();
    // if (ParentItem?.Item?.Childrens?.All(x=>!x.Selected)??false)
    // {
    //     ParentItem.Collapse();
    // }
    }


    private void OnItemExpandClickCallback()
    {
        if (Expanded)
            Collapse();
        else
            Expand();

        TreeView.StateHasChanged();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}