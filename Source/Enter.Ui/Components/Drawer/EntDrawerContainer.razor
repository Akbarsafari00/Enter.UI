@namespace Enter.Ui.Components
<div @ref="Reference" class="@ClassNames" style="@StyleNames" id="@Id">
    @if (RenderIsReady)
    {
        <CascadingValue Value="this" IsFixed="true">
            @ChildContent
        </CascadingValue>
    }
</div>
@using Enter.Ui.Cores.Contracts
@using Enter.Ui.Cores.Core
@using Enter.Ui.Cores.Models
@using Enter.Ui.Components.Drawer
@inherits Enter.Ui.Bases.EntResponsiveComponent

@code {

    internal ElementReference Reference { get; set; }

    [Inject]
    public IEntSharedJsService SharedJsService { get; set; } = default!;

    [Parameter]
    public EntDrawerWidthType? DrawersWidthType { get; set; } = EntDrawerWidthType.Custom;

    [Parameter]
    public double DrawersWidth { get; set; } = 300;

    public BoundingClientRect BoundingClientRect { get; set; } = default!;

    public override string ComponentName => nameof(EntDrawerContainer);

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-drawer-container");
        base.BuildClasses(builder);
    }
    protected override void BuildStyles(StyleBuilder builder)
    {
        builder.AddStyle($"--ent-drawer-width: {DrawersWidth}px",RenderIsReady);
        base.BuildStyles(builder);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (DrawersWidthType is not null )
            {
                BoundingClientRect = await SharedJsService.GetBoundingClientRectAsync(Reference);
                Console.WriteLine(BoundingClientRect.ScrollWidth);
                Console.WriteLine(Responsive);
                if (!Responsive)
                {
                    switch (DrawersWidthType)
                    {
                        case EntDrawerWidthType.Custom:
                            break;
                        case EntDrawerWidthType.Full:
                            DrawersWidth = BoundingClientRect.ScrollWidth ;
                            break;
                        case EntDrawerWidthType.Half:
                            DrawersWidth = BoundingClientRect.ScrollWidth / 2;
                            break;
                        case EntDrawerWidthType.Quarter:
                            DrawersWidth = BoundingClientRect.ScrollWidth / 4;
                            break;
                        case null:
                            break;
             
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                }
                else
                {
  
                    DrawersWidth = (BoundingClientRect.ScrollWidth * 90) / 100;
                }
            }
        
           
        }
        await base.OnAfterRenderAsync(firstRender);
    }

  


    private bool HasBackdrop { get; set; } = false;


    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}