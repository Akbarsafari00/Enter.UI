@namespace Enter.Ui.Components
<div @ref="Reference" class="@ClassNames" style="@StyleNames" id="@Id">
    @if (RenderIsReady)
    {
        <CascadingValue Value="this" IsFixed="true">
            @ChildContent
        </CascadingValue>
    }
</div>
@using Enter.Ui.Cores.Contracts
@using Enter.Ui.Cores.Core
@using Enter.Ui.Cores.Models
@using Enter.Ui.Components.Drawer
@inherits Enter.Ui.Bases.EntResponsiveComponent

@code {

    internal ElementReference Reference { get; set; }

    [Inject]
    public IEntSharedJsService SharedJsService { get; set; } = default!;

    [Parameter]
    public EntDrawerWidthType? DrawersWidthType { get; set; } = EntDrawerWidthType.Custom;
    
    [Parameter]
    public double DrawersWidth { get; set; } = 300;
    
    
    public BoundingClientRect BoundingClientRect { get; set; } = default!;

    public override string ComponentName => nameof(EntDrawerContainer);

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-drawer-container");
        base.BuildClasses(builder);
    }
    protected override void BuildStyles(StyleBuilder builder)
    {
        builder.AddStyle($"--ent-drawer-width: {DrawersWidth}px");
        base.BuildStyles(builder);
       
    }

    protected override async Task OnFirstAfterRenderAsync()
    {
        Console.WriteLine("OnFirstAfterRenderAsync");
        BoundingClientRect = await SharedJsService.GetBoundingClientRectAsync(Reference);
        Console.WriteLine(BoundingClientRect.Width);
        await base.OnFirstAfterRenderAsync();
    }


    private bool HasBackdrop { get; set; } = false;


    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}