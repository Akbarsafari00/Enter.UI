@namespace Enter.Ui.Components
@using Enter.Ui.Components.Drawer
@using Enter.Ui.Cores.Core
@inherits Enter.Ui.Bases.EntResponsiveComponent


@if (RenderIsReady)
{
    <aside class="@ClassNames" style="@StyleNames">@ChildContent</aside>
    <EntOverlay Visible="HasBackdrop" DarkBackground="true" OnClick="@OnOverlayClickCallback" @ontouchstart="@OnOverlayClickCallback"  class="ent-drawer-overlay" LockScroll="false"/>

}
@code {
    public override string ComponentName => nameof(EntDrawer);
    protected override void BuildClasses(ClassBuilder builder)
    {
        builder
            .AddClass("ent-drawer")
            .AddClass("ent-drawer-transparent",Transparent)
            .AddClass("ent-drawer--direction-start", Direction == EntDrawerDirection.Start)
            .AddClass("ent-drawer--direction-end", Direction == EntDrawerDirection.End)
            .AddClass("ent-drawer--mode-behavior", Mode == EntDrawerMode.Behavior)
            .AddClass("ent-drawer--mode-overlay", Mode == EntDrawerMode.Overlay)
            .AddClass("ent-drawer--open", Open)
            .AddClass("ent-drawer--close", !Open);
        base.BuildClasses(builder);
    }
    

    protected override void BuildStyles(StyleBuilder builder)
    {
        builder.AddStyle($"--ent-drawer-width: {DrawerContainer?.DrawersWidth}px");
        base.BuildStyles(builder);
       
    }

    protected override void OnParametersSet()
    {
        StyleBuilder?.CanUpdate();
        ClassBuilder?.CanUpdate();
        base.OnParametersSet();
    }
    protected override Task OnParametersSetAsync()
    {
        StyleBuilder?.CanUpdate();
        ClassBuilder?.CanUpdate();
        return base.OnParametersSetAsync();
    }

    protected override void OnFirstAfterRender()
    {
        switch (DrawerContainer.DrawersWidthType)
        {
            case EntDrawerWidthType.Custom:
                break;
            case EntDrawerWidthType.Full:
                DrawerContainer.DrawersWidth = DrawerContainer?.BoundingClientRect.ScrollWidth ?? 0;
                break;
            case EntDrawerWidthType.Half:
                DrawerContainer.DrawersWidth = DrawerContainer?.BoundingClientRect.ScrollWidth / 2 ??0;
                break;
            case EntDrawerWidthType.Quarter:
                DrawerContainer.DrawersWidth = DrawerContainer?.BoundingClientRect.ScrollWidth / 4 ??0;
                break;
            case null:
                break;
             
            default:
                throw new ArgumentOutOfRangeException();
        }
        if (Responsive)
        {
            Mode = EntDrawerMode.Overlay;
        }
        
        base.OnFirstAfterRender();
    }

    [Parameter]
    public EntDrawerDirection Direction { get; set; } = EntDrawerDirection.Start;

    [Parameter]
    public EntDrawerMode Mode { get; set; } = EntDrawerMode.Behavior;



    [CascadingParameter]
    public EntDrawerContainer DrawerContainer { get; set; } = default!;

    private bool _open = false;

    [Parameter]
    public bool Open { get; set; }
    
    [Parameter]
    public bool Transparent { get; set; }

    [Parameter]
    public bool HasBackdrop { get; set; }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }


    private async Task OnOverlayClickCallback()
    {
        Open = false;
        HasBackdrop = false;
        await OpenChanged.InvokeAsync(Open);
        StateHasChanged();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}