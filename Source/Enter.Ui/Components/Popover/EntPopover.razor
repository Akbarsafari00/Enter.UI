@namespace Enter.Ui.Components
@using Enter.Ui.Services
@inherits Enter.Ui.Bases.EntComponentBase

<div @attributes="AdditionalAttributes" class="@ClassNames" id="@($"ent-popover-{_id}")">

</div>

@code {

    private string ClassNames => ClassBuilder
        .AddClass("ent-popover")
        .Build();

    private string _popoverClass => ClassBuilder
        .Clean()
        .AddClass("ent-popover-content")
        .AddClass($"ent-popover-anchor-{Anchor.GetCssClass()}")
        .AddClass($"ent-popover-{Transform.GetCssClass()}")
        .AddClass("ent-popover-overflow-flip-onopen")
        .AddClass("ent-popover-open", Open)
        .AddClass("ent-popover-relative-width", RelativeWidth)
        .Build();

    [Inject]
    public IEntPopoverService EntPopoverService { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string PopoverClass { get; set; }

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public bool RelativeWidth { get; set; }

    [Parameter]
    public Origin Anchor { get; set; } = Origin.BottomCenter;

    [Parameter]
    public Origin Transform { get; set; } = Origin.TopCenter;

    private EntPopoverService _entPopoverService = default!;
    private Guid _id;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _entPopoverService = (EntPopoverService)EntPopoverService;

        _id = await EntPopoverService.RegisterAsync(ChildContent, _popoverClass, Open);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await EntPopoverService.ConnectAsync(_id);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await EntPopoverService.UpdateParameterAsync(_id, _popoverClass, Open);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}