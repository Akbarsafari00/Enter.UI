@namespace Enter.Ui.Components
@using Enter.Ui.Cores.Core
@using Enter.Ui.Cores.Enums
@using Enter.Ui.Cores.Extensions
@using Enter.Ui.Cores.Contracts
@inherits Enter.Ui.Bases.EntBaseComponent

<div @attributes="@AdditionalAttributes" class="@ClassNames" id="@($"ent-popover-{_id}")">

</div>

@code {


    public EntPopover()
    {
        PopoverClassBuilder = new ClassBuilder(BuildPopoverClasses);
    }

    public ClassBuilder PopoverClassBuilder { get; set; }
    
    public string PopoverClassNames => PopoverClassBuilder.Build();
    
    protected override void BuildStyles(StyleBuilder builder)
    {
        base.BuildStyles(builder);
    }

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-popover");
        base.BuildClasses(builder);
    }
    
    protected  void BuildPopoverClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-popover-content")
            .AddClass($"ent-popover-anchor-{Anchor.GetCssClass()}")
            .AddClass($"ent-popover-{Transform.GetCssClass()}")
            .AddClass("ent-popover-overflow-flip-onopen")
            .AddClass("ent-popover-open", Open)
            .AddClass("ent-popover-relative-width", RelativeWidth);
        
    }

    [Inject]
    public IEntPopoverService EntPopoverService { get; set; }


    [Parameter]
    public string PopoverClass { get; set; }

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public bool RelativeWidth { get; set; }

    [Parameter]
    public Origin Anchor { get; set; } = Origin.BottomCenter;

    [Parameter]
    public Origin Transform { get; set; } = Origin.TopCenter;

    private EntPopoverService _entPopoverService = default!;
    private Guid _id;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _entPopoverService = (EntPopoverService)EntPopoverService;

        _id = await EntPopoverService.RegisterAsync(ChildContent, PopoverClassNames, Open);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await EntPopoverService.ConnectAsync(_id);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        StyleBuilder?.CanUpdate();
        ClassBuilder?.CanUpdate();
        PopoverClassBuilder?.CanUpdate();
        await base.OnParametersSetAsync();
        await EntPopoverService.UpdateParameterAsync(_id, PopoverClassNames, Open);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}