@namespace Enter.Ui.Components
@using Enter.Ui.Cores.Core
@using Enter.Ui.Cores.Contracts
@inherits Enter.Ui.Bases.EntBaseComponent
<div class="@ClassNames">
    @foreach (var item in _entPopoverService.PopoverInstances)
    {
        <div @key="@item.Key" @onclick="() => { }" class="@item.Value.PopoverClass" id="@($"ent-popover-content-{item.Key}")">
            @if (item.Value.ShowContent)
            {
                @item.Value.ContentFragment
            }
        </div>
    }
</div>

@code {
    public override string ComponentName => this.GetType().Name;
    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-popover-provider");
        base.BuildClasses(builder);
    }

    [Inject]
    public IEntPopoverService EntPopoverService { get; set; } = default!;


    private EntPopoverService _entPopoverService = default!;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _entPopoverService = (EntPopoverService)EntPopoverService;

        _entPopoverService.FragmentsChanged += EntPopoverServiceOnFragmentsChanged;
    }

    private void EntPopoverServiceOnFragmentsChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private Task OnPopoverContainerClick(MouseEventArgs arg)
    {
        return Task.CompletedTask;
    // await EntPopoverService.CloseAllAsync();
    }


    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _entPopoverService.FragmentsChanged -= EntPopoverServiceOnFragmentsChanged;
        }
    }

}