@using Enter.Ui.Components.Inputs
@using Enter.Ui.Components.Icon
@using System.Diagnostics.CodeAnalysis
@using Enter.Ui.Cores.Core
@using Enter.Ui.Cores.Extensions
@namespace Enter.Ui.Components
@inherits Enter.Ui.Bases.EntInputBase<string?>

<div @attributes="@AdditionalAttributes" class="@ClassNames" style="@StyleNames" id="@Id">
    <input @ref="_elementReference" name="@ValueExpression?.GetPropertyName()" type="@(IsPassword ? "password" : "text")" class="ent-input-field" placeholder="@PlaceHolder"
           @bind="@CurrentValueAsString"
           @bind:event="@EventType" disabled="@Disabled" readonly="@Readonly"/>

    @if (Icon != null)
    {
        <div class="ent-input-icon">
            <EntIcon IconSize="EntIconSize.Medium" Icon="@Icon"/>
        </div>
    }
</div>

@code {

    private ElementReference _elementReference = default!;

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder
            .AddClass("ent-input-lg", Size == EntInputSize.Large)
            .AddClass("ent-input-sm", Size == EntInputSize.Small);
        
        base.BuildClasses(builder);
    }

    [Parameter]
    public object Icon { get; set; }

    [Parameter]
    public string EventType { get; set; } = "onchange";

    [Parameter]
    public EntInputSize Size { get; set; } = EntInputSize.Default;

    [Parameter]
    public bool IsPassword { get; set; } = false;

    [CascadingParameter]
    public EditContext? EditContext { get; set; }

    public ValueTask FocusAsync()
    {
        return _elementReference.FocusAsync();
    }

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

}