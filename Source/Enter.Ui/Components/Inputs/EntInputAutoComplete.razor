@namespace Enter.Ui.Components
@inherits Enter.Ui.Bases.EntInputBase<string>
@using Enter.Ui.Components.Icon
@using System.Diagnostics.CodeAnalysis
@typeparam T
<div @attributes="@AdditionalAttributes" class="@ClassNames" style="@StyleNames" @ref="_elementReference" id="@Id">
    <EntInputText  @ref="_inputReference" EventType="oninput" class="@("ent-input-autocomplete-input")"
                  Value="@Value" ValueChanged="@ValueChanged" Disabled="@Disabled" Readonly="@Readonly" @onclick="@Click" @onfocusin="@Click"
                  ValueExpression="@ValueExpression" @oninput="@OnInputCallback" Icon="@EntIconName.Search"/>

    <EntPopover Open="_showMenu" RelativeWidth="true" Anchor="Origin.BottomCenter" Transform="Origin.TopCenter" PopoverClass="@("ent-input-autocomplete-popover")">

        <div class="ent-input-autocomplete-container">
            @if (DataSources.Any())
            {
                <EntList class="ent-input-autocomplete-list">
                    @foreach (var item in DataSources)
                    {
                        <EntListItem class="ent-input-autocomplete-list-item" @onclick="() => OnItemClickCallback(item)">
                            @if (ItemTemplate == null)
                            {
                                @ValueFunc.Invoke(item)
                            }
                            else
                            {
                                @ItemTemplate?.Invoke(item)
                            }
                        </EntListItem>
                    }
                </EntList>
            }
            else
            {
                <p class="ent-input-autocomplete-message">داده ای یافت نشد</p>
            }
        </div>

    </EntPopover>
    <EntOverlay Visible="_showMenu" OnClick="@CloseOverlay" @ontouchstart="@CloseOverlay" LockScroll="false"/>
</div>


@code {

    private Task AfterAsync()
    {
        return Task.CompletedTask;
    }

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-input-autocomplete");
        base.BuildClasses(builder);
    }


    private bool _showMenu = false;
    private EntInputText _inputReference;

    [Parameter]
    public List<T> DataSources { get; set; }


    [Parameter]
    public Func<T, object> ValueFunc { get; set; }

    [Parameter]
    public RenderFragment<T>? ItemTemplate { get; set; }

    [Parameter]
    public EventCallback<string> OnSearchChange { get; set; }

    private ElementReference _elementReference;

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    public ValueTask FocusAsync()
    {
        return _inputReference.FocusAsync();
    }

    private void OnInputCallback()
    {
        _showMenu = true;
        OnSearchChange.InvokeAsync(CurrentValueAsString);
    }

    private void CloseOverlay()
    {
        _showMenu = false;
    }

    private async Task OnItemClickCallback(T t)
    {
        CurrentValueAsString = ValueFunc.Invoke(t).ToString();
        _showMenu = false;
    }

    private async Task Click()
    {
        _showMenu = true;
        await _elementReference.FocusAsync();
    }

}