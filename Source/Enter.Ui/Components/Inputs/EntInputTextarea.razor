@namespace Enter.Ui.Components
@inherits Enter.Ui.Bases.EntInputBase<string?>
@using System.Diagnostics.CodeAnalysis
@implements IAsyncDisposable

<div @attributes="@AdditionalAttributes" class="@ClassNames" id="@Id">
    <textarea @ref="_elementReference" name="@ValueExpression?.GetPropertyName()" class="ent-input-field" placeholder="@PlaceHolder"
    @bind="@CurrentValueAsString"
    rows="@Rows"
    @bind:event="@EventType" disabled="@Disabled" readonly="@Readonly">
    
    </textarea>

</div>

@code {

    private ElementReference _elementReference = default!;

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-input");
        base.BuildClasses(builder);
    }


    [Parameter]
    public int Rows { get; set; } = 3;

    [CascadingParameter]
    public EditContext? EditContext { get; set; }

    [Parameter]
    public string EventType { get; set; } = "onchange";

    public ValueTask FocusAsync()
    {
        return _elementReference.FocusAsync();
    }

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

}