@namespace Enter.Ui.Components
@using Enter.Ui.Components.Icon
@inherits Enter.Ui.Bases.EntComponentComponent

<div @attributes="@AdditionalAttributes" class="@ClassNames">
    @if (Title != null)
    {
        <div @onclick="HeaderClick" class="ent-card-header">
            @if (Icon != null)
            {
                <span class="ent-card-header-icon">
                    <EntIcon Icon="@Icon"/>
                </span>
            }
            <span class="ent-card-header-title">
                @Title
            </span>
            @if (Expandable)
            {
                <span class="ent-card-header-toggle-icon @(CardExpand ? "show" : "")">
                    <EntIcon Icon="@EntIconName.ChevronDown"/>
                </span>
            }

        </div>
    }
    @if (Expandable)
    {
        <EntExpandable Tag="@Tag" @bind-Expanded="CardExpand">
            <div class="ent-card-content">
                @CardBody
            </div>
        </EntExpandable>
    }
    else
    {
        <div class="ent-card-content">
            @CardBody
        </div>
    }

    @if (CardFooter != null)
    {
        <div class="ent-card-footer">
            @CardFooter
        </div>
    }

</div>

@code {

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-card");
        base.BuildClasses(builder);
    }


    public bool CardExpand { get; set; } = true;

    [Parameter]
    public EventCallback<bool> CardExpandChanged { get; set; }

    [Parameter]
    public object Icon { get; set; }

    [Parameter]
    public bool Expandable { get; set; } = false;

    [Parameter]
    public RenderFragment? CardBody { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment? CardFooter { get; set; }

    public void HeaderClick()
    {
        CardExpand = !CardExpand;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}