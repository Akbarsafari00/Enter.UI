@namespace Enter.Ui.Components
@using Enter.Ui.Components.Icon
@inherits Enter.Ui.Bases.EntBaseComponent

<div class="calendar-view">
    <div class="actions">
        <EntButton @onclick="BeforeMonth" class="controller" Icon="@EntIconName.ChevronLeft"></EntButton>
        <b>
            @currentDate.ToString("yyyy MMMM")
        </b>
        <EntButton @onclick="NextMonth" class="controller" Icon="@EntIconName.ChevronRight"></EntButton>
    </div>
    <div class="calendar">
        <div class="week">
            <div class="day-header">Sun</div>
            <div class="day-header">Mon</div>
            <div class="day-header">Tue</div>
            <div class="day-header">Wed</div>
            <div class="day-header">Thu</div>
            <div class="day-header">Fri</div>
            <div class="day-header">Sat</div>
        </div>

        @foreach (var week in calendarDates)
        {
            <div class="week">
                @foreach (var date in week)
                {
                    <div class="date 
                                @(date.Month == currentDate.Month ? "current-month" : "other-month") @(date.Date == DateTime.Today ? "today" : "") @(date.Date == SelectedDate.Date ? "active" : "")" @onclick="() => SelectDate(date)">
                        @if (date != DateTime.MinValue)
                        {
                            @date.Day
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>


@code {
    public override string ComponentName => GetType().Name;

    private DateTime currentDate = DateTime.Now;
    private DateTime[][] calendarDates;

    [Parameter]
    public DateTime SelectedDate { get; set; } = default!;
    [Parameter]
    public EventCallback<DateTime> SelectedDateChanged { get; set; } = default!;

    protected override void OnInitialized()
    {
        UpdateCalendar();
    }

    private void UpdateCalendar()
    {
        calendarDates = GetCalendarDates(currentDate.Year, currentDate.Month);
    }

    private DateTime[][] GetCalendarDates(int year, int month)
    {
        var dates = new DateTime[6][];
        var daysInMonth = DateTime.DaysInMonth(year, month);
        var firstDayOfMonth = new DateTime(year, month, 1);
        var offset = (int)firstDayOfMonth.DayOfWeek;

    // Calculate the first day to display in the calendar
        var startDate = firstDayOfMonth.AddDays(-offset);

        var currentDay = 1;

        for (var i = 0; i < 6; i++)
        {
            dates[i] = new DateTime[7];

            for (var j = 0; j < 7; j++)
            {
                dates[i][j] = startDate.AddDays(i * 7 + j);

                if (dates[i][j].Month == month)
                {
                    currentDay++;
                }
            }
        }

        return dates;
    }

    private async Task SelectDate(DateTime dt)
    {
        SelectedDate = dt;
        await SelectedDateChanged.InvokeAsync(SelectedDate);
    }

    private async Task NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
        calendarDates = GetCalendarDates(currentDate.Year, currentDate.Month);
    }

    private async Task BeforeMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        calendarDates = GetCalendarDates(currentDate.Year, currentDate.Month);
    }

}