@namespace Enter.Ui.Components
@using Enter.Ui.Components.Loading
@using Enter.Ui.Cores.Core
@inherits Enter.Ui.Bases.EntBaseComponent
<span @attributes="@AdditionalAttributes" class="@ClassNames" style="@StyleNames">
    @if (Indeterminate)
    {
        <span class="indeterminate"></span>
    }
    else
    {
        <span class="determinate" style="@ItemStyleNames"></span>
    }
</span>


@code {
    public override string ComponentName => nameof(EntLinearLoading);
    protected string ItemStyleNames => ItemStyleBuilder?.Build() ?? string.Empty;

    protected StyleBuilder? ItemStyleBuilder { get; set; }

    public EntLinearLoading()
    {
        ItemStyleBuilder = new StyleBuilder(BuildItemStyles);
    }
    
    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-linear-loading")
            .AddClass("ent-linear-loading-lg", Size == EntLoadingSize.Large)
            .AddClass("ent-linear-loading-sm", Size == EntLoadingSize.Small)
            .AddClass("ent-linear-loading")
            .AddClass("animate", Animate);
        
        base.BuildClasses(builder);
    }

    protected virtual void BuildItemStyles(StyleBuilder builder)
    {
        builder.AddStyle($"width: {Width}%");
        base.BuildStyles(builder);
    }


    [Parameter]
    public bool Animate { get; set; } = true;

    [Parameter]
    public bool Indeterminate { get; set; } = true;

    [Parameter]
    public EntLoadingSize Size { get; set; } = EntLoadingSize.Default;

    [Parameter]
    public int Width { get; set; } = 0;

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}