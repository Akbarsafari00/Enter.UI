@namespace Enter.Ui.Components
@using Enter.Ui.Components.Animator
@using Enter.Ui.Components.Expandable
@using Enter.Ui.Cores.Contracts
@using Enter.Ui.Cores.Core
@using Microsoft.JSInterop
@inherits Enter.Ui.Bases.EntBaseComponent

<EntAnimator @attributes="@AdditionalAttributes"
             @ref="Reference"
             id="@Id"
             class="@ClassNames"
             style="@StyleNames"
             @bind-State="AnimationState"
             OnAnimationEnd="OnAnimationEnd">
    @ChildContent
</EntAnimator>

@code {
    public override string ComponentName => nameof(EntExpandable);
    private EntAnimatorState AnimationState { get; set; } = EntAnimatorState.End;
    private EntExpandableDirection _direction = EntExpandableDirection.Vertical;
    private bool _expanded, _updateHeight;
    private double _size = 0;
    private string _cssProperty = "height";



    internal EntAnimator Reference { get; set; } = default!;

    [Inject]
    internal IEntSharedJsService? SharedJsService { get; set; }

    // Style and Css
    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-expandable")
            .AddClass("ent-expandable-horizontal", Direction == EntExpandableDirection.Horizontal)
            .AddClass("ent-expandable-vertical", Direction == EntExpandableDirection.Vertical)
            .AddClass("ent-expandable-closed", AnimationState == EntAnimatorState.End)
            .AddClass("ent-expandable-opened", AnimationState == EntAnimatorState.Start)
            .AddClass("ent-expandable-closing", AnimationState == EntAnimatorState.Ending)
            .AddClass("ent-expandable-opening", AnimationState == EntAnimatorState.Starting);
        base.BuildClasses(builder);
    }

    protected override void BuildStyles(StyleBuilder builder)
    {
        builder.AddStyle("transition: all 0.25s ease-in-out", AnimationState is EntAnimatorState.End or EntAnimatorState.Starting)
            .AddStyle($"{_cssProperty} : auto", AnimationState == EntAnimatorState.Start)
            .AddStyle($"{_cssProperty} : 0px", AnimationState == EntAnimatorState.End)
            .AddStyle($"{_cssProperty} : {_size}px", AnimationState is EntAnimatorState.Ending or EntAnimatorState.Starting);
        base.BuildStyles(builder);
    }

    // Parameters

    [Parameter]
    public EntExpandableDirection Direction
    {
        get => _direction;
        set
        {
            _cssProperty = value == EntExpandableDirection.Horizontal ? "width" : "height";
            _direction = value;
        }
    }

    [Parameter]
    public bool Expanded
    {
        get => _expanded;
        set
        {
            if (_expanded == value)
                return;
            _expanded = value;

            if (RenderIsReady)
            {
                AnimationState = _expanded ? EntAnimatorState.Starting : EntAnimatorState.Ending;
                _ = UpdateSize();
                _updateHeight = true;
            }
            else if (_expanded)
            {
                AnimationState = EntAnimatorState.Start;
            }
            StyleBuilder?.CanUpdate();
            ClassBuilder?.CanUpdate();
            _ = ExpandedChanged.InvokeAsync(_expanded);
        }
    }

    [Parameter]
    public EventCallback<bool> ExpandedChanged { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     _animationState = Expanded switch
    //     {
    //         true => EntExpandableAnimationState.Opened,
    //         false => EntExpandableAnimationState.Closed
    //     };
    // }


    public Task OnAnimationEnd()
    {
        switch (AnimationState)
        {
            case EntAnimatorState.Ending:
                AnimationState = EntAnimatorState.End;
                StateHasChanged();
                break;
            case EntAnimatorState.Starting:
                AnimationState = EntAnimatorState.Start;
                StateHasChanged();
                break;
            case EntAnimatorState.Start:
                break;
            case EntAnimatorState.End:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        return Task.CompletedTask;
    }


    protected override async Task OnFirstAfterRenderAsync()
    {
        await UpdateSize();
        await base.OnFirstAfterRenderAsync();
    }

    internal async Task UpdateSize()
    {
        try
        {
            if (SharedJsService == null)
                throw new JSException($"SharedJsService Not be Found . please in inject this service in {nameof(EntExpandable)}");

            var reactBounding = await SharedJsService.GetBoundingClientRectAsync(Reference.Reference);

            if (Direction == EntExpandableDirection.Vertical)
            {
                _size = reactBounding?.ScrollHeight ?? 0;
            }
            else
            {
                _size = reactBounding?.ScrollWidth ?? 0;
            }
        }
        catch (Exception ex) when (ex is JSDisconnectedException or TaskCanceledException)
        {
            _size = 0;
        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}