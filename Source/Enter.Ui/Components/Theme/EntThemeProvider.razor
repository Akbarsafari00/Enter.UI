@using Microsoft.JSInterop
@using Enter.Ui.Cores.Core
@using Enter.Ui.Cores.Enums
@using Enter.Ui.Cores.Services
@using Enter.Ui.Cores.Contracts
@namespace Enter.Ui.Components
@inherits Enter.Ui.Bases.EntElementComponent

@if (_readyForRender)
{
    <CascadingValue Value="this" IsFixed="true">
        <div dir="@Direction" class="@ClassNames">
            @ChildContent
        </div>
    </CascadingValue>
}

<style>
    :root {
      --ent-drawer-width : @(DrawerDefaultWidth)px;  
    }
</style>

@code {

    public override string ComponentName => nameof(EntThemeProvider);
    
    private bool _readyForRender = false;

    private string Direction => RtlMode ? "rtl" : "ltr";

    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-ui vertical-scroll");
        base.BuildClasses(builder);
        
    }

    [Inject]
    private IEntSharedJsService SharedJsService { get; set; } = default!;

    [Inject]
    private IEntJsService EntJsService { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeThemeConfiguration().ConfigureAwait(false);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task InitializeThemeConfiguration()
    {
        var objRef = DotNetObjectReference.Create(this);
        await SharedJsService.InitializeBreakpointEventAsync(objRef);

        CurrentBreakPoint = await SharedJsService.GetBreakpointAsync();

        if (ResponsiveMode == false && CurrentBreakPoint <= ResponsiveBreakpoint)
        {
            await SetResponsiveModeAsync(true);
        }

        await SetDarkModeAsync(DarkMode);
        _readyForRender = true;
        StateHasChanged();
    }

    #region RtlMode

    public bool RtlMode { get; set; } = false;

    public void EnableRtl()
    {
        RtlMode = true;
        StateHasChanged();
    }

    public void DisableRtl()
    {
        RtlMode = false;
        StateHasChanged();
    }

    public void SetRtl(bool enable)
    {
        if (enable)
        {
            EnableRtl();
        }
        else
        {
            DisableRtl();
        }
    }

    public void ToggleRtl()
    {
        SetRtl(!RtlMode);
    }

    #endregion

    #region DarkMode

    public bool DarkMode { get; set; } = false;

    public async Task EnableDarkModeAsync()
    {
        DarkMode = true;
        await SharedJsService.SetAttributeByQuerySelectorAsync("html", "data-theme", "dark");

        StateHasChanged();
    }

    public async Task DisableDarkModeAsync()
    {
        DarkMode = false;
        await SharedJsService.SetAttributeByQuerySelectorAsync("html", "data-theme", "light");

        StateHasChanged();
    }

    public async Task SetDarkModeAsync(bool enable)
    {
        if (enable)
        {
            await EnableDarkModeAsync();
        }
        else
        {
            await DisableDarkModeAsync();
        }
    }

    public async Task ToggleDarkModeAsync()
    {
        await SetDarkModeAsync(!DarkMode);
    }

    #endregion

    #region ResponsiveMode

    public bool ResponsiveMode { get; set; }

    public async Task EnableResponsiveModeAsync()
    {
        ResponsiveMode = true;
        await SharedJsService.SetAttributeByQuerySelectorAsync("html", "data-theme-responsive", "true");

        StateHasChanged();
    }

    public async Task DisableResponsiveModeAsync()
    {
        ResponsiveMode = false;
        await SharedJsService.SetAttributeByQuerySelectorAsync("html", "data-theme-responsive", "false");

        StateHasChanged();
    }

    public bool GetResponsiveModeAsync()
    {
        return CurrentBreakPoint <= EntBreakpoint.Tablet;
    }

    public async Task SetResponsiveModeAsync(bool enable)
    {
        if (enable)
        {
            await EnableResponsiveModeAsync();
        }
        else
        {
            await DisableResponsiveModeAsync();
        }
    }

    public async Task ToggleResponsiveModeAsync()
    {
        await SetResponsiveModeAsync(!ResponsiveMode);
    }

    #endregion

    #region Breakpoint

    [Parameter]
    public EntBreakpoint ResponsiveBreakpoint { get; set; } = EntBreakpoint.Tablet;
    
    public EntBreakpoint CurrentBreakPoint { get; set; }


    public Task<EntBreakpoint> GetBreakpointAsync()
    {
        return SharedJsService.GetBreakpointAsync();
    }

    [JSInvokable("OnBreakpointEventListener")]
    public void OnBreakpointEventListener(string breakpoint)
    {
        if (breakpoint == CurrentBreakPoint.ToString()) return;

        CurrentBreakPoint = Enum.Parse<EntBreakpoint>(breakpoint);

    // StateHasChanged();
    }

    #endregion

    #region Drawer

    [Parameter]
    public int DrawerDefaultWidth { get; set; } = 260;

    #endregion

    

}