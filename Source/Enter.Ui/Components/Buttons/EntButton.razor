
@namespace Enter.Ui.Components
@using Enter.Ui.Components.Button
@using Enter.Ui.Components.Icon
@inherits Enter.Ui.Bases.EntComponentBase

<button @attributes="@AdditionalAttributes" disabled="@(Disabled ? true : false)" class="@ClassNames">
    @if (Icon != null && !Loading)
    {
        <span class="icon-wrapper">
            <EntIcon class="icon" Icon="@Icon" IconSize="EntIconSize.Medium" IconStyle="EntIconStyle.Light"/>
        </span>
    }

    @if (Loading)
    {
        <span class="icon-wrapper">
            <EntCircularLoading Animate="Loading" class="icon ent-btn-loading"/>
        </span>
    }
    @ChildContent

</button>

@code {

  
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public ButtonSize Size { get; set; } = ButtonSize.Medium;

    [Parameter]
    public ButtonAppearance Appearance { get; set; } = ButtonAppearance.Default;

    [Parameter]
    public ButtonColor Color { get; set; } = ButtonColor.Default;

    [Parameter]
    public object? Icon { get; set; }

    [Parameter]
    public bool Loading { get; set; } = false;

    [Parameter]
    public bool Disabled { get; set; } = false;


    protected override void BuildClasses(ClassBuilder builder)
    {
        builder.AddClass("ent-btn");
        builder.AddClass("ent-btn-size-lg", Size == ButtonSize.Large);
        builder.AddClass("ent-btn-size-md", Size == ButtonSize.Medium);
        builder.AddClass("ent-btn-size-sm", Size == ButtonSize.Small);
        builder.AddClass("ent-btn-outline", Appearance == ButtonAppearance.Outline);
        builder.AddClass("ent-btn-ghost", Appearance == ButtonAppearance.Ghost);
        builder.AddClass("ent-btn-primary", Color == ButtonColor.Primary);
        builder.AddClass("ent-btn-only-icon", Icon != null && ChildContent == null);
        builder.AddClass("ent-btn-disabled", Disabled);
        base.BuildClasses(builder);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

}