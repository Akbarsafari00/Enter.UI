@using Enter.UI.JsService
@using Microsoft.JSInterop
@using Enter.UI.Core.Enums
@namespace Enter.UI.Components

<CascadingValue Value="this" IsFixed="true">
    <div dir="@Direction" class="@RootCss">
         @ChildContent
    </div>
</CascadingValue>

<style>
    :root {
      --drawer-width : @(@DrawerDefaultWidth)px;  
    }
</style>

@code {

   
    protected string RootCss => new  CssClassBuilder("ent-ui")
        .AddClass("ent-rtl",Rtl)
        .AddClass("ent-ltr",!Rtl)
        .AddClass("ent-dark-mode",DarkMode)
        .Build();
    
    [Inject]
    public IEntSharedJsService SharedJsService { get; set; }
    
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;
    
    [Parameter]
    public bool Rtl { get; set; } = false;
    
    [Parameter]
    public bool DarkMode { get; set; } = false;

    public event Action<EntBreakpoint>? BreakpointChangeEvent; 

    public string Direction => Rtl ? "rtl" : "ltr";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var objRef = DotNetObjectReference.Create(this);
            await SharedJsService.InitializeBreakpointEvent(objRef);
        }
    }


    public void EnableRtl()
    {
        Rtl = true;
        StateHasChanged();
    }
    public void DisableRtl()
    {
        Rtl = false;
        StateHasChanged();
    }
    public void ToggleRtl()
    {
        Rtl = !Rtl;
        StateHasChanged();
    }
    
    public void EnableDarkMode()
    {
        DarkMode = true;
        StateHasChanged();
    }
    public void DisableDarkMode()
    {
        DarkMode = false;
        StateHasChanged();
    }
    public void ToggleDarkMode()
    {
        DarkMode = !DarkMode;
        StateHasChanged();
    }
    
    
    [JSInvokable("OnBreakpointEventListener")]
    public async Task OnBreakpointEventListener(string breakpoint)
    {
        if (BreakpointChangeEvent != null)
        {
            var value = Enum.Parse<EntBreakpoint>(breakpoint);
            BreakpointChangeEvent.Invoke(value);
        }
    }

    [Parameter]
    public int DrawerDefaultWidth { get; set; } = 260;


}