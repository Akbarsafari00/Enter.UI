@namespace Enter.UI.Components

@typeparam TValue
@using Enter.UI.Abstractions.Components.TreeView
@using Enter.UI.Abstractions.Core
@inherits EntComponentBase  

<CascadingValue Value="this" IsFixed="true">
    <ul @attributes="@AdditionalAttributes" class="@RootCss">
        @if (DataSource != null)
        {
            @foreach (var item in DataSource)
            {
                    <EntTreeViewItem Item="@item"  />
            }
        }
    </ul>
</CascadingValue>


@code {

    private string RootCss => CssClassBuilder
    .AddClass("ent-treeview")
    .Build();

    private string Item =>new  CssClassBuilder()
        .AddClass("ent-treeview")
        .Build();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool MultiSelect { get; set; } = false;



    [Parameter]
    public TValue? SelectedValue { get; set; }

    [Parameter]
    public EventCallback<TValue?> SelectedValueChanged { get; set; }

    [Parameter]
    public List<TValue> SelectedValues { get; set; } = new List<TValue>();

    [Parameter]
    public EventCallback<List<TValue>> SelectedValuesChanged { get; set; }

    [Parameter]
    public EntTreeViewSelectMode SelectMode { get; set; } = EntTreeViewSelectMode.Select;



    [Parameter]
    public IEnumerable<EntSelectItem<TValue>>? DataSource { get; set; }


    public async Task Select(TValue value)
    {
        if (MultiSelect)
        {
            SelectedValues.Add(value);
            await SelectedValuesChanged.InvokeAsync(SelectedValues);
        }
        else
        {
            SelectedValue = value;
            await SelectedValueChanged.InvokeAsync(SelectedValue);
        }
    }

    public async Task DeSelect(TValue value)
    {
        if (MultiSelect)
        {
            SelectedValues.Remove(value);
            await SelectedValuesChanged.InvokeAsync(SelectedValues);
        }
        else
        {
            SelectedValue = default;
            await SelectedValueChanged.InvokeAsync(SelectedValue);
        }
    }

    public new void StateHasChanged()
    {
       base.StateHasChanged();
    }


    
}

