@namespace Enter.UI.Components
@typeparam TType where TType : Enter.UI.Abstractions.Components.TreeView.IEntTreeViewItem<TType,TValue>
@typeparam TValue
@using Enter.UI.Abstractions.Components.TreeView
@using Enter.UI.Abstractions.Core
@inherits EntComponentBase  

<CascadingValue Value="this" IsFixed="true">
    <ul @attributes="@AdditionalAttributes" class="@RootCss">
        @if (DataSource != null)
        {
            @foreach (var item in DataSource)
            {
                    <EntTreeViewItem Item="@item"  />
            }
        }
    </ul>
</CascadingValue>


@code {

    private string RootCss => CssClassBuilder
        .AddClass("ent-treeview")
        .Build();
    
    private string Item =>new  CssClassBuilder()
        .AddClass("ent-treeview")
        .Build();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool MultiSelect { get; set; } = false;

    [Parameter]
    public TValue? SelectedValue { get; set; } = default!;
    
    [Parameter]
    public EventCallback<TValue?> SelectedValueChanged { get; set; }
    
    [Parameter]
    public List<TValue> SelectedValues { get; set; } = new List<TValue>();
    
    [Parameter]
    public EventCallback<List<TValue>> SelectedValuesChanged { get; set; }

    [Parameter]
    public EntTreeViewSelectMode SelectMode { get; set; } = EntTreeViewSelectMode.Select;
    
    
    [Parameter]
    public List<TType>? DataSource { get; set; }
    

    public void ItemClick(IEntTreeViewItem<TType,TValue> item,
        IEntTreeViewItem<TType,TValue>? parentItem = null ,
         bool fromChild = false) 
    {
        if (MultiSelect)
        {
            
            var shouldAdd = false;
            if (parentItem != null)
            {
                shouldAdd = SelectedValues.Contains(parentItem.Value);
            }
            else
            {
               shouldAdd = !SelectedValues.Contains(item.Value);
            }

            if (shouldAdd)
            {
                
                SelectedValues.Add(item.Value);
                SelectedValues = SelectedValues.Distinct().ToList();
            }
            else
            {
                SelectedValues.Remove(item.Value);
            }

            if (item.Childrens != null && !fromChild)
            {
                foreach (var it in item.Childrens)
                {
                    ItemClick(it, item);
                }
            }

            SelectedValuesChanged.InvokeAsync(SelectedValues);
        }
        else
        {
            @if (SelectMode == EntTreeViewSelectMode.Toggle && SelectedValue != null && SelectedValue.Equals(item.Value))
            {
                SelectedValue = default;
            }
            else
            {
                SelectedValue = item.Value;
                SelectedValueChanged.InvokeAsync(SelectedValue);
            }
            
            SelectedValueChanged.InvokeAsync(SelectedValue);   
        }
        StateHasChanged();
    }

    
}
@code {
    public void ForceStateHasChanged()
    {
        StateHasChanged();
    }

}
