@namespace Enter.UI.Components
@typeparam TType where TType : IEntTreeViewItem<TType,TValue>
@typeparam TValue
@using Enter.UI.Components
@using Enter.UI.Abstractions.Components.TreeView
@inherits EntBaseComponent 

<CascadingValue Value="this" IsFixed="true">
    <li @attributes="@AdditionalAttributes" class="@RootCss" @onclick="()=>OnItemClickCallback()" @onclick:stopPropagation>
    
        <div class="ent-treeview-item-list-icon" @onclick="OnItemExpandClickCallback" @onclick:stopPropagation>
            @if (Item.Childrens != null && Item.Childrens.Any())
            {
                <EntIcon Size="4" Icon="@EntIcons.ChevronDown"/>
            }
        </div>
        
        @if (TreeView.MultiSelect)
        {
            <InputCheckbox class="ent-treeview-item-checkbox" Value="@Checked" 
                           ValueExpression="() => Checked"/>
        }
    
        @if (Item.Icon != null)
        {
            <div class="ent-treeview-item-icon">
                <EntIcon Size="4" Icon="@Item.Icon"/>
            </div>
        }
        <span class="ent-treeview-item-text">
            @Item.Text
        </span>
    
    </li>


@if (Item.Childrens != null && Item.Childrens.Any())
{
    <EntExpandable @bind-Expanded="Expanded" class="ent-treeview-childrens">
        
        @foreach (var item in Item.Childrens)
        {
            <EntTreeViewItem  Item="@item" />
        }
        
    </EntExpandable>
}
</CascadingValue>
@code {

    private string RootCss => CssClassBuilder
        .AddClass("ent-treeview-item")
        .AddClass("active", !TreeView.MultiSelect && Checked)
        .AddClass("expanded", Expanded)
        .Build();

    [CascadingParameter]
    public EntTreeView<TType,TValue> TreeView { get; set; } = default!;
    
    [CascadingParameter]
    public EntTreeViewItem<TType,TValue>? TreeViewItem { get; set; } = null;

    public bool Expanded { get; set; }

    public bool Checked => (TreeView.MultiSelect) 
        ? TreeView.SelectedValues.Contains(Item.Value) 
        :TreeView.SelectedValue?.Equals(Item.Value)??false;

    [Parameter]
    public IEntTreeViewItem<TType, TValue> Item { get; set; } = default;

    public void OnItemClickCallback(bool fromChild = false)
    {
        TreeView.ItemClick(Item,null,fromChild);

        // TreeViewItem?.OnItemClickCallback(true);
    }
    private void OnItemExpandClickCallback()
    {
        Expanded = !Expanded;
    }

}