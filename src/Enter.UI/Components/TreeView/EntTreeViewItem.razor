@namespace Enter.UI.Components
@typeparam TValue
@using Enter.UI.Abstractions.Components.TreeView
@using Enter.UI.Abstractions.Core
@inherits EntComponentBase

<CascadingValue Value="this" IsFixed="true">
    <li @attributes="@AdditionalAttributes" class="@RootCss" @onclick="()=>Select()" @onclick:stopPropagation>

        <div class="ent-treeview-item-list-icon" @onclick="OnItemExpandClickCallback" @onclick:stopPropagation>
            @if (Item.Childrens != null && Item.Childrens.Any())
            {
                <EntIcon Size="4" Icon="@EntIcons.ChevronDown"/>
            }
        </div>

        @if (TreeView.MultiSelect)
        {
            <InputCheckbox class="ent-treeview-item-checkbox" Value="@Checked"
                           ValueExpression="() => Checked"/>
        }

        @if (Item.Icon != null)
        {
            <div class="ent-treeview-item-icon">
                <EntIcon Size="4" Icon="@Item.Icon"/>
            </div>
        }
        <span class="ent-treeview-item-text">
            @Item.Text
        </span>

    </li>


    @if (Item.Childrens != null && Item.Childrens.Any())
    {
        <EntExpandable @bind-Expanded="Expanded" class="ent-treeview-childrens">

            @foreach (var item in Item.Childrens)
            {
                <EntTreeViewItem Item="@item"  />
            }

        </EntExpandable>
    }
</CascadingValue>

@code {

    private string RootCss => CssClassBuilder
        .AddClass("ent-treeview-item")
        .AddClass("active", !TreeView.MultiSelect && Checked)
        .AddClass("expanded", Expanded)
        .Build();

    [CascadingParameter]
    public EntTreeView<TValue> TreeView { get; set; } = default!;

    [CascadingParameter]
    public EntTreeViewItem<TValue>? ParentItem { get; set; } = null;

    public bool Expanded { get; set; }

    private bool HaveParentItem => ParentItem != null;

    private bool Checked  => TreeView.MultiSelect
        ? TreeView.SelectedValues.Contains(Item.Value)
        : TreeView.SelectedValue?.Equals(Item.Value) ?? false;




    [Parameter]
    public EntSelectItem<TValue> Item { get; set; } = default;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


        if (firstRender && Checked)
        {
            Expand();
            TreeView.StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Select()
    {
        if (Checked)
        {
            await TreeView.DeSelect(Item.Value);
        }
        else
        {
            await TreeView.Select(Item.Value);

            // if (IsMultiSelect && (Item.Childrens?.Any() ?? false))
            // {
            //     foreach (var item in Item.Childrens)
            //     {
                    
            //     }
                
            // }

            Expand();
        }

       TreeView.StateHasChanged();
      
    }

   

    private bool IsMultiSelect => TreeView.MultiSelect;
    

  


    
    
    public void Expand()
    {
        Expanded = true;
        ParentItem?.Expand();
    }

    public void Collapse()
    {
        Expanded = false;
        // ParentItem?.Collapse();
        // if (ParentItem?.Item?.Childrens?.All(x=>!x.Selected)??false)
        // {
        //     ParentItem.Collapse();
        // }
      
    }

    
    
    private void OnItemExpandClickCallback()
    {
        if (Expanded)
            Collapse();
        else
            Expand();
        
        TreeView.StateHasChanged();
    }

}