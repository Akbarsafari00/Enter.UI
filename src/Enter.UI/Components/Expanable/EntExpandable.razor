@namespace Enter.UI.Components
@using Enter.UI.Interops;
@using Enter.UI.JsService;
@using Enter.UI.Services.Contracts;
@using Microsoft.JSInterop;
@inherits EntBaseComponent

<div @ref="Reference"
     @attributes="@AdditionalAttributes"
     @onanimationend="EventUtil.AsNonRenderingEventHandler(OnAnimationEnd)"
     class="@RootCss"
     style="@RootStyle"
     id="@Id">
    @ChildContent
</div>

@code {
    
    enum EntExpandableAnimationState
    {
        Opened,
        Opening,
        Closed,
        Closing
    }

    private EntExpandableAnimationState? _animationState = EntExpandableAnimationState.Closed;
    private bool _expanded, _updateHeight;
    private double _size = 0;
    private EntExpandableDirection _direction = EntExpandableDirection.Vertical;
    private string _cssProperty = "height";
    
    internal ElementReference Reference { get; set; }

    [Inject]
    internal IEntSharedJsService? SharedJsService { get; set; }

    // Style and Css
    private string RootCss => CssClassBuilder
        .AddClass("ent-expandable")
        .AddClass("ent-expandable-horizontal", Direction == EntExpandableDirection.Horizontal)
        .AddClass("ent-expandable-vertical", Direction == EntExpandableDirection.Vertical)
        .AddClass("ent-expandable-closed", _animationState == EntExpandableAnimationState.Closed)
        .AddClass("ent-expandable-opened", _animationState == EntExpandableAnimationState.Opened)
        .AddClass("ent-expandable-closing", _animationState == EntExpandableAnimationState.Closing)
        .AddClass("ent-expandable-opening", _animationState == EntExpandableAnimationState.Opening)
        .Build();

    private string RootStyle => StyleBuilder
        .AddStyle("transition: all 0.25s ease-in-out", _animationState is EntExpandableAnimationState.Closing or EntExpandableAnimationState.Opening)
        .AddStyle($"{_cssProperty} : auto", _animationState == EntExpandableAnimationState.Opened)
        .AddStyle($"{_cssProperty} : 0px", _animationState == EntExpandableAnimationState.Closed)
        .AddStyle($"{_cssProperty} : {_size}px", _animationState is EntExpandableAnimationState.Closing or EntExpandableAnimationState.Opening)
        .Build();

    // Parameters
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EntExpandableDirection Direction
    {
        get => _direction;
        set
        {
            _cssProperty = value == EntExpandableDirection.Horizontal ? "width" : "height";
            _direction = value;
        }
    }

    [Parameter]
    public bool Expanded
    {
        get => _expanded;
        set
        {
            if (_expanded == value)
                return;
            _expanded = value;

            if (FirstRendered)
            {
                _animationState = _expanded ? EntExpandableAnimationState.Opening : EntExpandableAnimationState.Closing;
                _ = UpdateSize();
                _updateHeight = true;
            }
            else if (_expanded)
            {
                _animationState = EntExpandableAnimationState.Opened;
            }

            _ = ExpandedChanged.InvokeAsync(_expanded);
        }
    }

    [Parameter]
    public EventCallback<bool> ExpandedChanged { get; set; }

    // protected override async Task OnInitializedAsync()
    // {
    //     _animationState = Expanded switch
    //     {
    //         true => EntExpandableAnimationState.Opened,
    //         false => EntExpandableAnimationState.Closed
    //     };
    // }


    public Task OnAnimationEnd()
    {
        switch (_animationState)
        {
            case EntExpandableAnimationState.Closing:
                _animationState = EntExpandableAnimationState.Closed;
                StateHasChanged();
                break;
            case EntExpandableAnimationState.Opening:
                _animationState = EntExpandableAnimationState.Opened;
                StateHasChanged();
                break;
            case EntExpandableAnimationState.Opened:
                break;
            case EntExpandableAnimationState.Closed:
                break;
            case null:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        return Task.CompletedTask;
    }
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateSize();
        }
        else if (_updateHeight && _animationState is EntExpandableAnimationState.Closing or EntExpandableAnimationState.Opening)
        {
            _updateHeight = false;
            await UpdateSize();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    internal async Task UpdateSize()
    {
        try
        {
            if (SharedJsService == null)
                throw new JSException($"SharedJsService Not be Found . please in ject this service in {nameof(EntExpandable)}");

            if (Direction == EntExpandableDirection.Vertical)
            {
                _size = (await SharedJsService.GetBoundingClientRect(Reference))?.ScrollHeight ?? 0;
            }
            else
            {
                _size = (await SharedJsService.GetBoundingClientRect(Reference))?.ScrollWidth ?? 0;
            }
        }
        catch (Exception ex) when (ex is JSDisconnectedException or TaskCanceledException)
        {
            _size = 0;
        }

    }

}