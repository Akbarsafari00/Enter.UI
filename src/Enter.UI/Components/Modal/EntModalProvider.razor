@namespace Enter.UI.Components
@implements IAsyncDisposable
<div class="ent-modal-provider ">
    @foreach (var item in @_modalService.Items)
    {
        <CascadingValue Value="item" IsFixed="true">
            <EntModal Title="@item.Title" OnCancelClick="() => OnCancelClick(item.Key)" Options="item.Options">
                <DynamicComponent Type="@item.Type" Parameters="@item.Parameters"/>
            </EntModal>
        </CascadingValue>
    }
</div>

@code {

    [Inject]
    private IModalService ModalService { get; set; }

    private ModalService _modalService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _modalService = (ModalService)ModalService ?? throw new InvalidOperationException("AddEnterUI is not added to your program.cs");

        await base.OnInitializedAsync();

        _modalService.OnModalShowed += ModalServiceOnOnModalShowed;
        _modalService.OnModalClosed += ModalServiceOnOnModalClosed;
        _modalService.OnModalCanceled += ModalServiceOnOnModalCanceled;
        ;
    }

    private void ModalServiceOnOnModalCanceled(string obj)
    {
        StateHasChanged();
    }


    private void ModalServiceOnOnModalClosed(string obj)
    {
        StateHasChanged();
    }

    private void ModalServiceOnOnModalShowed(string obj)
    {
        StateHasChanged();
    }


    private async Task OnCloseClick(string id)
    {
        await _modalService.CloseAsync(id);
    }

    private async Task OnCancelClick(string id)
    {
        await _modalService.CancelAsync(id);
    }

    public async ValueTask DisposeAsync()
    {
        _modalService.OnModalShowed -= ModalServiceOnOnModalShowed;
        _modalService.OnModalClosed -= ModalServiceOnOnModalClosed;
        _modalService.OnModalCanceled -= ModalServiceOnOnModalCanceled;
    }

}