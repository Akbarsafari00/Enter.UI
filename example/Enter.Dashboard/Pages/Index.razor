@page "/"
@using Enter.UI.Core
@using Enter.Dashboard.Model
@using Enter.UI.Abstractions.Components.Drawer
@using Enter.UI.Abstractions.Components.Flex
@using Enter.UI.Abstractions.Components.Modal
@using Enter.UI.Abstractions.Components.Toast
@using Enter.UI.Abstractions.Components.TreeView
@using Enter.UI.Abstractions.Services

<PageTitle>Index</PageTitle>

<EntFlex class="h-full" Direction="FlexDirection.Column">
    <EntMdiTab ItemDirection="EntTabItemDirection.Horizontal"
               KeepPanelAlive="true"
               PanelClass="h-full"
               ActiveClass=""
               Closeable="true"
               class="border-0 h-full"
               Direction="EntTabDirection.Vertical">
        <div class="p-8">
            <EntCard Title="Default" Expandable="true" class="mb-8">
                <CardBody>
                    <EntFlex Direction="FlexDirection.Column">
                        <b>This page is the default in EntMdiTab</b>
                    </EntFlex>
                </CardBody>
            </EntCard>
            <EntCard Title="SideBar" Expandable="true" class="mb-8">
                <CardBody>
                    <EntDrawerContainer class="h-50">
                        <EntDrawer Open="IsSidebarOpen" class="bg-secondary">
                            <EntText>sidebar</EntText>
                        </EntDrawer>

                        <EntDrawer Direction="EntDrawerDirection.End" Mode="EntDrawerMode.Overlay" Open="IsSidebarOpen" class="bg-secondary">
                            <EntText>sidebar</EntText>
                        </EntDrawer>
                        <div class="d-flex ">
                            <EntButton @onclick="ToggleDrawer">Click</EntButton>
                            <div class="flex-grow-1"></div>
                            <EntButton @onclick="ToggleDrawer">Click</EntButton>
                        </div>

                    </EntDrawerContainer>
                </CardBody>
            </EntCard>
            <EntCard class="mb-8" Tag="card" Expandable="true" CardExpand="false" Icon="fa-light fa-user" Title="Toasts">
                <CardBody>
                    <EntFlex Direction="FlexDirection.Column"
                             LaptopDirection="FlexDirection.Row"
                             LaptopAlign="FlexAlign.StartCenter"
                             Align="FlexAlign.StartCenter"
                             Gap="4">
                        <EntButton @onclick="()=>OpenToast(EntToastType.Success)" Loading="true" type="button" >Success Toast</EntButton>
                        <EntButton @onclick="()=>OpenToast(EntToastType.Danger)" type="button" >Danger Toast</EntButton>
                        <EntButton @onclick="()=>OpenToast(EntToastType.Info)" type="button" >Info Toast</EntButton>
                    </EntFlex>
                </CardBody>
            </EntCard>
            <EntCard Expandable="true" CardExpand="false" class="mb-8" Title="Modals">
                <CardBody>
                    <EntFlex Direction="FlexDirection.Column"
                             LaptopDirection="FlexDirection.Row"
                             LaptopAlign="FlexAlign.StartCenter"
                             Gap="4">
                        <EntButton type="button" @onclick="() => OpenModal(EntModalSize.ExtraLarge)">Modal ExtraLarge</EntButton>
                        <EntButton type="button" @onclick="() => OpenModal(EntModalSize.Large)">Modal Large</EntButton>
                        <EntButton type="button" @onclick="() => OpenModal(EntModalSize.Medium)">Modal Medium</EntButton>
                        <EntButton type="button" @onclick="() => OpenModal(EntModalSize.Small)">Modal Small</EntButton>
                        <EntButton type="button" @onclick="() => OpenModal(EntModalSize.Fullscreen)">Modal FullScreen</EntButton>
                    </EntFlex>
                </CardBody>
            </EntCard>
            <EntCard Expandable="true" CardExpand="false" class="mb-8" Title="Popover">
                <CardBody>
                    <EntButton @onclick="OpenPopover">Show</EntButton>
                    <EntPopover Open="IsPopoverOpen" RelativeWidth="true">
                        <EntCard>
                            <CardBody>
                                <p>ssss</p>
                            </CardBody>
                        </EntCard>
                    </EntPopover>
                </CardBody>
            </EntCard>


            <div class="row">
                <div class="col-1/2">
                    <EntCard Expandable="true" CardExpand="false" class="mb-8" Title="TreeView (Single Select)">
                        <CardBody>
                            <EntTreeView
                                MultiSelect="false"
                                SelectMode="EntTreeViewSelectMode.Toggle"
                                DataSource="@Constants.Roles"
                                @bind-SelectedValue="TreeSelectedValue"/>

                            <span class="me-2">
                                @TreeSelectedValue
                            </span>

                        </CardBody>
                    </EntCard>
                </div>

                <div class="col-1/2">
                    <EntCard Expandable="true" CardExpand="false" class="mb-8" Title="TreeView (Multi Select)">
                        <CardBody>
                            <EntTreeView
                                MultiSelect="true"
                                DataSource="Constants.Roles"
                                @bind-SelectedValues="TreeSelectedValues"/>
                            @foreach (var item in TreeSelectedValues)
                            {
                                <span class="me-2">
                                    @item
                                </span>
                            }
                        </CardBody>
                    </EntCard>
                </div>
            </div>
            <EntCard Expandable="true" class="mb-8" Title="Form">
                <CardBody>

                    <b class="mb-2">AutoComplete Input</b>
                    <EntInputAutoComplete class="mb-8"
                                          @bind-Value="AutoCompleteValue"
                                          DataSources="AutoCompleteDataSource"
                                          ValueFunc="x => x.Name"
                                          OnSearchChange="OnSearchChangeCallBack"/>
                    <b class="mb-2">Select Input</b>
                    <EntInputSelect @bind-Value="SelectValue"
                                    PlaceHolder="Select the desired role"
                                    DataSources="Constants.Roles"
                                    ValueFunc="x => x.Value"
                                    TextFunc="x => x.Text"/>
                </CardBody>
            </EntCard>

        </div>
    </EntMdiTab>
</EntFlex>

@code {


    public List<string> TreeSelectedValues { get; set; } = new List<string>(){"Admin"};
    public string TreeSelectedValue { get; set; } = "Admin";
    public bool IsPopoverOpen { get; set; }
    public bool IsSidebarOpen { get; set; } = true;
    public string AutoCompleteValue { get; set; }
    public string SelectValue { get; set; }

    public List<Users> AutoCompleteDataSource { get; set; } = Constants.Users;

    [Inject]
    public IEntModalService ModalService { get; set; }

    [Inject]
    public IEntToastService ToastService { get; set; }

    public async Task OpenModal(EntModalSize size)
    {
        var confirmResult = await ModalService.MessageBoxAsync("Open Modal", "Are you sure to oprn Modal?", "Show", "Dismiss");
        if (!confirmResult.Canceled)
        {
            var parameter = new ParameterBuilder<Counter>()
                .Build();

            var result = await ModalService.ShowAsync<Counter>("sada", parameter, new EntModalOptions
            {
                Size = size
            });
            
            
        }
    }

    public void OpenPopover()
    {
    //IsPopoverOpen = !IsPopoverOpen;
    }

    public async Task OpenToast(EntToastType type)
    {
        switch (type)
        {
            case EntToastType.Info:
                await ToastService.NotifyInfoAsync("Info", "The content we display");
                break;
            case EntToastType.Success:
                await ToastService.NotifySuccessAsync("Success", "The content we display");
                break;
            case EntToastType.Danger:
                await ToastService.NotifyDangerAsync("Danger", "The content we display");
                break;
            case EntToastType.Warning:
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(type), type, null);
        }
    }

    private async Task OnSearchChangeCallBack(string search)
    {
        AutoCompleteDataSource = Constants.Users.Where(x => x.Name.Contains(search)).ToList();
    }

    public async Task ToggleDrawer()
    {
        IsSidebarOpen = !IsSidebarOpen;
    }

}