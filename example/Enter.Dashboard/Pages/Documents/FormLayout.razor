@page "/documents/form"
@using System.ComponentModel.DataAnnotations
@using Enter.Dashboard.Model;
@using Enter.UI.Abstractions.Components.Button
@using Enter.UI.Abstractions.Components.Icon
@using Enter.UI.Abstractions.Components.Inputs
@using Enter.UI.Core
<div class="">
    <EntToolbar class="my-4">
        <EntButton  Appearance="ButtonAppearance.Default" Color="ButtonColor.Primary" Icon="EntIconName.Add"  >Add</EntButton>
        <EntButton  Appearance="ButtonAppearance.Default" Icon="EntIconName.Note" Loading="true" >Document</EntButton>
        <EntButton  Appearance="ButtonAppearance.Outline" Icon="EntIconName.Note"></EntButton>
        <EntButton  Appearance="ButtonAppearance.Subtle" Icon="EntIconName.Upload"></EntButton>
    </EntToolbar>
    <EntCard Expandable="true"  Title="Form Layout">
        <CardBody>
            <EditForm class="ent-edit-form" Model="Input" OnSubmit="@OnSubmit">
                <DataAnnotationsValidator />
                <div class="row">
                    <EntInputGroup For="()=>Input.Id" Label="شناسه" class="tablet:col-1/3 mb-4 ">
                        <EntInputText Size="EntInputSize.Large"  @bind-Value="Input.Id" Icon="@EntIconName.ChevronLeft" />
                    </EntInputGroup>
                     <EntInputGroup For="()=>Input.User" Label="نام" class="tablet:col-1/3 mb-4">
                      
                         <EntInputAutoComplete
                              @ref="_autoCompleteReference"
                             @bind-Value="Input.User"
                                              ValueFunc="x=>x.Name"
                                              TextFunc="x=>x.Name"
                                              DataSources="DataSource"
                                              Icon="@EntIconName.Search"
                                              OnSearchChange="OnLastNameSearchChange"/>
                      
                    </EntInputGroup>
                    <EntInputGroup 
                        For="()=>Input.Role" 
                        Label="نقش"  
                        class="tablet:col-1/3 mb-4">
                      
    
                        <EntInputSelect @bind-Value="Input.Role"
                                   PlaceHolder="نقش مورد نظر را انتخاب نمایید"
                                   DataSources="Constants.Roles"
                                   ValueFunc="x=>x.Value"
                                   TextFunc="x=>x.Text" />
    
                       
                    </EntInputGroup>
                    <EntInputGroup
                        class="tablet:col-1/3 mb-4 " 
                        Label="سن" 
                        For="()=> Input.Age">
                        <EntInputTextarea Rows="10"  @bind-Value="Input.Age" />
                    </EntInputGroup>
                </div>
                <div class="row">
                    <div class="tablet:col-1/3">
                        <EntButton  type="submit">ارسال</EntButton>
                    </div>
                </div>
            </EditForm>
        </CardBody>
    </EntCard>
</div>

@code {

    public EntInputAutoComplete<Users> _autoCompleteReference { get; set; }
    
    public class InputModel
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();

        [Required(ErrorMessage = "کاربر اجباری میباشد")]
        public string User { get; set; }


        [Required(ErrorMessage = "سن اجباری میباشد")]
        public string Age { get; set; }

        [Required(ErrorMessage = "نقش اجباری میباشد")]
        public string Role { get; set; }
    }

    public InputModel Input { get; set; } = new InputModel()
    {
        User = "اکبر",
        Role = "Admin"
    };

    private async Task OnSubmit()
    {
        await _autoCompleteReference.FocusAsync();
        Input.Role = "Developer";
        StateHasChanged();
    }



    public List<Users> DataSource = new List<Users>();


    protected override void OnInitialized()
    {


        DataSource = Constants.Users;

        base.OnInitialized();
    }

    private void OnLastNameSearchChange(string search)
    {
        if (search is null)
            return;
        DataSource = Constants.Users.Where(x => x.LastName.ToLower().Contains(search.ToLower())).ToList();

        StateHasChanged();
    }

}