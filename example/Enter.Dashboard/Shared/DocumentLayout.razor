@inherits LayoutComponentBase

@using Enter.Ui.Components.Drawer
@using Enter.Ui.Components.Icon
@using Enter.Ui.Components.Toast.Configuration
@using Enter.Ui.Cores.Contracts
@using Enter.Ui.Cores.Enums
@using Enter.Dashboard.Pages.Documents

@implements IDisposable
@if (_isReadyForRender)
{
    <div class="h-full border-y d-flex flex-column">
    <div class="d-flex flex-column flex-grow-1">
        <EntAppBar ShowToggle="_showToggle" ToggleClick="ToggleSidebar" Title="Enterprise Dashboard">
            <EntButton @onclick="ToggleRtl" Icon="EntIconName.AlignRight"/>
            <EntButton @onclick="ToggleDarkMode" Icon="EntIconName.Moon"/>
            <EntButton @onclick="@(() => _isSideDrawerOpen = !_isSideDrawerOpen)" Icon="EntIconName.Note"/>
        </EntAppBar>
        <EntDrawerContainer class="flex-grow-1">
            <EntDrawer HasBackdrop="HasBackdrop" @bind-Open="_isDrawerOpen" Direction="EntDrawerDirection.Start" Mode="_drawerMode" >
                <EntNavMenu class="border-0">
                    <EntNavMenuTextItem  Text="Buttons" Click="NewTab"/>
                    <EntNavMenuGroup Title="Documents">
                        <EntNavMenuTextItem  Text="Buttons" Click="@(() => Navigate("/documents/buttons"))"/>
                        <EntNavMenuTextItem  Text="Icons" Click="@(() => Navigate("/documents/icons"))"/>
                        <EntNavMenuTextItem  Text="Shimmer" Click="@(() => Navigate("/documents/shimmer"))"/>
                        <EntNavMenuTextItem  Text="Loading" Click="@(() => Navigate("/documents/loading"))"/>
                        <EntNavMenuTextItem  Text="Modals" Click="@(() => Navigate("/documents/modals"))"/>
                        <EntNavMenuTextItem  Text="Toasts" Click="@(() => Navigate("/documents/toasts"))"/>
                        <EntNavMenuTextItem  Text="TreeView" Click="@(() => Navigate("/documents/treeview"))"/>
                        <EntNavMenuTextItem  Text="NavMenu" Click="@(() => Navigate("/documents/navmenu"))"/>
                        <EntNavMenuTextItem  Text="Table" Click="@(() => Navigate("/documents/datatable"))"/>
                        <EntNavMenuTextItem  Text="Forms" Click="@(() => Navigate("/documents/form"))"/>
                        <EntNavMenuTextItem  Text="Pagination" Click="@(() => Navigate("/documents/pagination"))"/>
                        <EntNavMenuTextItem  Text="MdiTab" Click="@(() => Navigate("/documents/mdi-tabs"))"/>
                        <EntNavMenuTextItem  Text="Upload Box" Click="@(() => Navigate("/documents/upload-box"))"/>
                    </EntNavMenuGroup>
                    <EntNavMenuGroup Title="Layout">
                                            <EntNavMenuTextItem  Text="Grid System" Click="@(() => Navigate("/documents/grid-system"))"/>
                                        </EntNavMenuGroup>
                   
                </EntNavMenu>
            </EntDrawer>
            @* <EntDrawer  *@
            @*     Open="true"  *@
            @*     Direction="EntDrawerDirection.End"  *@
            @*     Mode="EntDrawerMode.Behavior" *@
            @*     class="z-50"> *@
            @*     <p class="p-4">Default Text To Show</p> *@
            @* </EntDrawer> *@
            <div class="h-full">
                @Body
            </div>
        </EntDrawerContainer>
    </div>

</div>
}
<EntModalProvider/>
<EntPopoverProvider/>
<EntToastProviders AutoResponsive="true"/>
<EntFloatingNavigationMenu AutoResponsive >
    <EntFloatingNavigationMenuItem  Icon="EntIconName.Home"/>
    <EntFloatingNavigationMenuItem Icon="EntIconName.Bars"/>
    <EntFloatingNavigationMenuItem  Icon="EntIconName.Comment"/>
</EntFloatingNavigationMenu>
@code {

    private bool _showToggle;
    private bool _isReadyForRender = false;
    private bool _isDrawerOpen = true;
    private bool _isSideDrawerOpen;
    private bool HasBackdrop => _showToggle && _isDrawerOpen;
    private EntDrawerMode _drawerMode = EntDrawerMode.Behavior;

    [CascadingParameter]
    public EntThemeProvider? EntThemeProvider { get; set; }

    [Inject]
    public IEntMdiService? EntMdiService { get; set; }

    [Inject]
    public NavigationManager? Navigation { get; set; }

    public void Navigate(string uri)
    {
        Navigation?.NavigateTo(uri);
    }
    public async Task NewTab()
    {
        for (var i = 0; i < 3; i++)
        {
            await EntMdiService.AddNewTabAsync<FormLayout>(Guid.NewGuid().ToString(), $"Upload Box {i}", "ri-upload-line");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
   

        if (firstRender)
        {
            if (EntThemeProvider != null)
            {
                var breakpoint = await EntThemeProvider.GetBreakpointAsync();
                HandleMobileSize(breakpoint);
            }
            
        }
        await  base.OnAfterRenderAsync(firstRender);
    }

    

    public void HandleMobileSize(EntBreakpoint breakpoint)
    {
        _drawerMode = breakpoint > EntBreakpoint.Tablet ? EntDrawerMode.Behavior : EntDrawerMode.Overlay;
        _isDrawerOpen = breakpoint > EntBreakpoint.Tablet;
        _showToggle = breakpoint <= EntBreakpoint.Tablet;
        _isReadyForRender = true;
             
        Console.WriteLine($"{nameof(DocumentLayout)} rendred");
        StateHasChanged();
    }

    private void ToggleRtl()
    {
        EntThemeProvider?.ToggleRtl();
    }

    private async Task ToggleDarkMode()
    {
        if (EntThemeProvider != null)
        {
            await EntThemeProvider.ToggleDarkModeAsync();
        }
    }

    public async Task ToggleSidebar()
    {
        _isDrawerOpen = !_isDrawerOpen;
        StateHasChanged();
    }


    private void OnSidebarIsShowChanged(bool sidebarIsShow)
    {
        StateHasChanged();
    }

    public void Dispose()
    {

    }

}