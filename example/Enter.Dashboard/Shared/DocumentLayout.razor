@using Enter.UI.Components.Drawer
@using Enter.UI.Components.Icon
@using Enter.UI.Core.Enums
@using Enter.UI.Services
@using Enter.UI.Components.Button
@inherits LayoutComponentBase
@implements IDisposable
<div class="h-full border-y d-flex flex-column">
    <div class="d-flex flex-column flex-grow-1">
        <EntAppBar ShowToggle="_showToggle" ToggleClick="ToggleSidebar" Title="Enterprise Dashboard">
            <EntButton @onclick="ToggleRtl" Icon="EntIconName.AlignRight" />
            <EntButton @onclick="ToggleDarkMode" Icon="EntIconName.Moon"  />
            <EntButton @onclick="() => _isSideDrawerOpen = !_isSideDrawerOpen" Icon="EntIconName.Note" />
        </EntAppBar>
        <EntDrawerContainer class="flex-grow-1">
            <EntDrawer HasBackdrop="HasBackdrop" @bind-Open="_isDrawerOpen" Direction="EntDrawerDirection.Start" Mode="_drawerMode" class="z-50">
                <EntNavMenu class="border-0">
                    <EntNavMenuTextItem class="bg-light" Text="Buttons" Click="@(() => Navigate("/documents/buttons"))"/>
                    <EntNavMenuGroup Title="Documents">
                        <EntNavMenuTextItem class="bg-light" Text="Buttons" Click="@(() => Navigate("/documents/buttons"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="Icons" Click="@(() => Navigate("/documents/icons"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="Shimmer" Click="@(() => Navigate("/documents/shimmer"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="Loading" Click="@(() => Navigate("/documents/loading"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="Modals" Click="@(() => Navigate("/documents/modals"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="TreeView" Click="@(() => Navigate("/documents/treeview"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="NavMenu" Click="@(() => Navigate("/documents/navmenu"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="Table" Click="@(() => Navigate("/documents/datatable"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="Forms" Click="@(() => Navigate("/documents/form"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="Pagination" Click="@(() => Navigate("/documents/pagination"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="MdiTab" Click="@(() => Navigate("/documents/mdi-tabs"))"/>
                        <EntNavMenuTextItem class="bg-light" Text="Upload Box" Click="@(() => Navigate("/documents/upload-box"))"/>
                    </EntNavMenuGroup>
                    <EntNavMenuGroup Title="Api" Icon="EntIconName.Home">
                        P
                    </EntNavMenuGroup>
                </EntNavMenu>
            </EntDrawer>
            @* <EntDrawer  *@
            @*     Open="true"  *@
            @*     Direction="EntDrawerDirection.End"  *@
            @*     Mode="EntDrawerMode.Behavior" *@
            @*     class="z-50"> *@
            @*     <p class="p-4">Default Text To Show</p> *@
            @* </EntDrawer> *@
            <div class="h-full">
                @Body
            </div>
        </EntDrawerContainer>
    </div>
    <EntModalProvider/>
    <EntPopoverProvider/>
    <EntToastProvider/>
</div>

@code {

    private bool _showToggle;
    private bool _isDrawerOpen = true;
    private bool _isSideDrawerOpen;
    private bool HasBackdrop => _showToggle && _isDrawerOpen;
    private EntDrawerMode _drawerMode = EntDrawerMode.Behavior;

    [CascadingParameter]
    public EntThemeProvider? EntThemeProvider { get; set; }

    [Inject]
    public IEntMdiService? EntMdiService { get; set; }

    [Inject]
    public NavigationManager? Navigation { get; set; }

    public void Navigate(string uri)
    {
        Navigation?.NavigateTo(uri);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (EntThemeProvider != null)
        {
            var breakpoint = await EntThemeProvider.GetBreakpointAsync();
            HandleMobileSize(breakpoint);
        }
    }



    public void HandleMobileSize(EntBreakpoint breakpoint)
    {
        _drawerMode = breakpoint > EntBreakpoint.Tablet ? EntDrawerMode.Behavior : EntDrawerMode.Overlay;
        _isDrawerOpen = breakpoint > EntBreakpoint.Tablet;
        _showToggle = breakpoint <= EntBreakpoint.Tablet;
        StateHasChanged();
    }

    private void ToggleRtl()
    {
        EntThemeProvider?.ToggleRtl();
    }

    private async Task ToggleDarkMode()
    {
        if (EntThemeProvider != null)
        {
            await EntThemeProvider.ToggleDarkModeAsync();
        }
    }

    public async Task ToggleSidebar()
    {
        _isDrawerOpen = !_isDrawerOpen;
        StateHasChanged();
    }


    private void OnSidebarIsShowChanged(bool sidebarIsShow)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
    }
}