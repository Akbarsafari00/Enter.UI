@using Enter.Dashboard.Pages;
@using Enter.UI.Models;
@using Enter.UI.Services.Contracts;
@using Enter.Dashboard.Components
@using Enter.UI.Core.Enums
@inherits LayoutComponentBase
 <div class="border-y d-flex flex-column">
        <div class="d-flex flex-column h-full">
            <div class="d-flex items-center  px-8 py-4 border-bottom bg-softlight box-shadow">
                <div class="flex-grow-1 d-flex  item-center gap-4">
                    <EntIcon Click="ToggleSidebar" class="cursor-pointer d-flex laptop:d-none" Type="EntIconType.IconTag" Icon="fa-light fa-bars"/>
                    <b>Enterprise Dashboard</b>
                </div>
                <div class="d-flex gap-2">
                    <EntButton @onclick="ToggleRtl" Icon="fa-light fa-align-right" Size="ButtonSize.Small" Color="ButtonColor.Secondary">Rtl / Ltr</EntButton>
                    <EntButton @onclick="ToggleDarkMode" Icon="fa-light fa-moon" Size="ButtonSize.Small" class="d-none laptop:d-flex" Color="ButtonColor.Secondary">Dark / Light</EntButton>
                    <EntButton @onclick="() => _isSideDrawerOpen = !_isSideDrawerOpen" Icon="fa-light fa-align-left" class="d-none laptop:d-flex" Size="ButtonSize.Small" Color="ButtonColor.Secondary">Sidebar</EntButton>
                </div>
            </div>
            <EntDrawerContainer class="h-full">
                <EntDrawer @bind-Open="_isDrawerOpen" Direction="EntDrawerDirection.Start"  Mode="_drawerMode" class="z-100">
                    <EntNavMenu class="border-0">
                        <EntNavMenuGroup Title="Basic" Icon="fa-light fa-home">
                            <EntNavMenuTextItem class="bg-light" Icon="fa-light fa-clock" Text="Counter" Click="() => AddNewTab<Counter>()"/>
                            <EntNavMenuTextItem class="bg-light" Icon="fa-light fa-arrow-down" Text="FetchData" Click="() => AddNewTab<FetchData>()"/>
                        </EntNavMenuGroup>
                        <EntNavMenuGroup Title="Forms" Icon="fa-light fa-note">
                            <EntNavMenuTextItem class="bg-light" Text="FormLayout" Click="() => AddNewTab<FormLayout>()"/>
                        </EntNavMenuGroup>
                        <EntNavMenuGroup Title="Tables" Icon="fa-light fa-note">
                            <EntNavMenuTextItem class="bg-light" Text="Table" Click="() => AddNewTab<Table>()"/>
                        </EntNavMenuGroup>
                    </EntNavMenu>
                </EntDrawer>
                <EntDrawer @bind-Open="_isSideDrawerOpen" Direction="EntDrawerDirection.End" Mode="EntDrawerMode.Overlay" class="z-100">
                    <p>Default Text To Show</p>
                </EntDrawer>
                <div class="h-full">
                    @Body
                </div>
            </EntDrawerContainer>
        </div>
        <EntModalProvider/>
        <EntPopoverProvider/>
        <EntToastProvider/>
    </div>

@code {

    private bool _isDrawerOpen = true;
    private bool _isSideDrawerOpen = false;
    private EntDrawerMode _drawerMode = EntDrawerMode.Behavior;

    [CascadingParameter]
    public EntThemeProvider? EntThemeProvider { get; set; }
    
    [Inject]
    public IEntMdiService EntMdiService { get; set; }


    public void AddNewTab<T>()
    {
        if (typeof(T) == typeof(Counter))
        {
            EntMdiService.AddNewTab<Counter>("counter", "شمارنده", "fa-light fa-clock");
        }
        else if (typeof(T) == typeof(FetchData))
        {
            EntMdiService.AddNewTab<FetchData>(Guid.NewGuid().ToString(), "دریافت اطلاعات", "fa-light fa-arrow-down");
        }
        else if (typeof(T) == typeof(FormLayout))
        {
            EntMdiService.AddNewTab<FormLayout>("FormLayout", "فرم معمولی", "fa-light fa-note");
        }
        else if (typeof(T) == typeof(Table))
        {
            EntMdiService.AddNewTab<Table>("Table", "جدول داده", "fa-light fa-table");
        }
    }

    protected override async Task OnAfterRenderAsync( bool firstRender)
    {
        await base.OnInitializedAsync();

        if (firstRender)
        {
            if (EntThemeProvider != null)
            {
                EntThemeProvider.BreakpointChangeEvent += EntThemeProviderBreakpointChangeEvent;
            }
        }
    }

    private void EntThemeProviderBreakpointChangeEvent(EntBreakpoint breakpoint)
    {
        _drawerMode = breakpoint > EntBreakpoint.Tablet ? EntDrawerMode.Behavior : EntDrawerMode.Overlay;
        _isDrawerOpen = breakpoint > EntBreakpoint.Tablet;
        StateHasChanged();
    }

    private void ToggleRtl()
    {
        EntThemeProvider?.ToggleRtl();
    }
    
    private void ToggleDarkMode()
    {
        EntThemeProvider?.ToggleDarkMode();
    }
    
    private async Task ToggleSidebar()
    {
        _isDrawerOpen = !_isDrawerOpen;
        StateHasChanged();
    }


    private void OnSidebarIsShowChanged(bool sidebarIsShow)
    {
        StateHasChanged();
    }

}