@using Enter.Ui.Components.Drawer
@using Enter.Ui.Components.Icon
@using Enter.Ui.Components.Button
@using Enter.Dashboard.Components
@using Enter.Ui.Cores.Contracts
@inherits LayoutComponentBase
<div class="border-y d-flex flex-column">
    <div class="d-flex flex-column flex-grow-1">
        <EntAppBar ShowToggle="_showToggle" ShowBack="_showToggle" ToggleClick="ToggleSidebar" Title="Enterprise Dashboard">
            <EntButton @onclick="ToggleRtl" Icon="EntIconName.AlignRight" Size="ButtonSize.Small">راستچین</EntButton>
            <EntButton @onclick="ToggleDarkMode" Icon="EntIconName.Moon" Size="ButtonSize.Small" class="d-none laptop:d-flex">Dark / Light</EntButton>
            <EntButton @onclick="() => _isSideDrawerOpen = !_isSideDrawerOpen" Icon="EntIconName.Comment" class="d-none laptop:d-flex" Size="ButtonSize.Small">Sidebar</EntButton>
        </EntAppBar>
        <EntDrawerContainer class="flex-grow-1">
            <EntDrawer @bind-Open="_isDrawerOpen" Direction="EntDrawerDirection.Start" Mode="_drawerMode" >
                <EntNavMenu class="border-0">
                    <EntNavMenuGroup Title="Basic" Icon="EntIconName.Home">
                        @* <EntNavMenuTextItem class="bg-light" Icon="EntIconName.Clock" Text="Counter" Click="() => AddNewTab<Counter>()"/> *@
                        @* <EntNavMenuTextItem class="bg-light" Icon="EntIconName.ChevronDown" Text="FetchData" Click="() => AddNewTab<FetchData>()"/> *@
                    </EntNavMenuGroup>

                    <EntNavMenuGroup Title="Tables" Icon="EntIconName.Note">
                        <EntNavMenuTextItem class="bg-light" Text="Table" Click="() => AddNewTab<Table>()"/>
                    </EntNavMenuGroup>
                </EntNavMenu>
            </EntDrawer>
            <EntDrawer
                @bind-Open="_isSideDrawerOpen"
                Direction="EntDrawerDirection.End"
                Mode="EntDrawerMode.Overlay"
              >
                <p>Default Text To Show</p>
            </EntDrawer>
            <div class="h-full">
                @Body
            </div>
        </EntDrawerContainer>
    </div>
    <EntModalProvider/>
    <EntPopoverProvider/>
    <EntToastProvider/>
</div>

@code {

    private bool _showToggle;
    private bool _isDrawerOpen = true;
    private bool _isSideDrawerOpen;
    private readonly EntDrawerMode _drawerMode = EntDrawerMode.Behavior;

    [CascadingParameter]
    public EntThemeProvider? EntThemeProvider { get; set; }

    [Inject]
    public IEntMdiService EntMdiService { get; set; }


    public void AddNewTab<T>()
    {
    // if (typeof(T) == typeof(Counter))
    // {
    // EntMdiService.AddNewTabAsync<Counter>("counter", "Counter", EntIconName.Clock);
    // }
    // else if (typeof(T) == typeof(ForalaView))
    // {
    // EntMdiService.AddNewTabAsync<ForalaView>(Guid.NewGuid().ToString(), "Forala View", EntIconName.Download);
    // }
    // else if (typeof(T) == typeof(FetchData))
    // {
    // EntMdiService.AddNewTabAsync<FetchData>(Guid.NewGuid().ToString(), "Fetch Data", EntIconName.Download);
    // }

        if (typeof(T) == typeof(Table))
        {
            EntMdiService.AddNewTabAsync<Table>("Table", "Table", EntIconName.Table);
        }
    }

    private void ToggleRtl()
    {
        EntThemeProvider?.ToggleRtl();
    }

    private async Task ToggleDarkMode()
    {
        if (EntThemeProvider != null)
        {
            await EntThemeProvider.ToggleDarkModeAsync();
        }
    }

    private async Task ToggleSidebar()
    {
        _isDrawerOpen = !_isDrawerOpen;
        StateHasChanged();
    }


    private void OnSidebarIsShowChanged(bool sidebarIsShow)
    {
        StateHasChanged();
    }

}